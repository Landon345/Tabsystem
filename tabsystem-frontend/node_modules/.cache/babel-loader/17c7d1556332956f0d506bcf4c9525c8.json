{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { cloneElement } from \"react\";\nimport { avatarSizes } from \"../Avatar/styles\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport Flex from \"../Flex\";\nimport { useTheme } from \"../ThemeProvider\";\nimport { cleanChildren } from \"../utils\";\n\nvar MoreAvatarLabel = function MoreAvatarLabel(_ref) {\n  var size = _ref.size,\n      label = _ref.label,\n      props = _objectWithoutPropertiesLoose(_ref, [\"size\", \"label\"]);\n\n  var borderColor = {\n    light: \"#fff\",\n    dark: \"gray.800\"\n  };\n  var bg = {\n    light: \"gray.200\",\n    dark: \"whiteAlpha.400\"\n  };\n  var theme = useTheme();\n  var sizeKey = avatarSizes[size];\n  var _size = theme.sizes[sizeKey];\n  var fontSize = \"calc(\" + _size + \" / 2.75)\";\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return jsx(Flex, _extends({\n    bg: bg[colorMode],\n    color: \"inherit\",\n    rounded: \"full\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    border: \"2px\",\n    borderColor: borderColor[colorMode],\n    size: avatarSizes[size],\n    fontSize: fontSize\n  }, props), label);\n};\n\nvar AvatarGroup = function AvatarGroup(_ref2) {\n  var size = _ref2.size,\n      children = _ref2.children,\n      borderColor = _ref2.borderColor,\n      max = _ref2.max,\n      _ref2$spacing = _ref2.spacing,\n      spacing = _ref2$spacing === void 0 ? -3 : _ref2$spacing,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"size\", \"children\", \"borderColor\", \"max\", \"spacing\"]);\n\n  var validChildren = cleanChildren(children);\n  var count = validChildren.length;\n  var clones = validChildren.map(function (child, index) {\n    if (max && index > max) {\n      return null;\n    }\n\n    if (max == null || max && index < max) {\n      var isFirstAvatar = index === 0;\n      return cloneElement(child, {\n        ml: isFirstAvatar ? 0 : spacing,\n        size: size,\n        borderColor: borderColor || child.props.borderColor,\n        showBorder: true,\n        zIndex: count - index\n      });\n    }\n\n    if (max && index === max) {\n      return jsx(MoreAvatarLabel, {\n        key: index,\n        size: size,\n        ml: spacing,\n        label: \"+\" + (count - max)\n      });\n    }\n  });\n  return jsx(Flex, _extends({\n    alignItems: \"center\"\n  }, rest), clones);\n};\n\nexport default AvatarGroup;","map":{"version":3,"sources":["/Users/landonschlangen/Documents/WebDevelopmentFolder/ReactApps/tabsystem/node_modules/@chakra-ui/core/dist/es/AvatarGroup/index.js"],"names":["_extends","_objectWithoutPropertiesLoose","jsx","cloneElement","avatarSizes","useColorMode","Flex","useTheme","cleanChildren","MoreAvatarLabel","_ref","size","label","props","borderColor","light","dark","bg","theme","sizeKey","_size","sizes","fontSize","_useColorMode","colorMode","color","rounded","alignItems","justifyContent","border","AvatarGroup","_ref2","children","max","_ref2$spacing","spacing","rest","validChildren","count","length","clones","map","child","index","isFirstAvatar","ml","showBorder","zIndex","key"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport { cloneElement } from \"react\";\nimport { avatarSizes } from \"../Avatar/styles\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport Flex from \"../Flex\";\nimport { useTheme } from \"../ThemeProvider\";\nimport { cleanChildren } from \"../utils\";\n\nvar MoreAvatarLabel = function MoreAvatarLabel(_ref) {\n  var size = _ref.size,\n      label = _ref.label,\n      props = _objectWithoutPropertiesLoose(_ref, [\"size\", \"label\"]);\n\n  var borderColor = {\n    light: \"#fff\",\n    dark: \"gray.800\"\n  };\n  var bg = {\n    light: \"gray.200\",\n    dark: \"whiteAlpha.400\"\n  };\n  var theme = useTheme();\n  var sizeKey = avatarSizes[size];\n  var _size = theme.sizes[sizeKey];\n  var fontSize = \"calc(\" + _size + \" / 2.75)\";\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return jsx(Flex, _extends({\n    bg: bg[colorMode],\n    color: \"inherit\",\n    rounded: \"full\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    border: \"2px\",\n    borderColor: borderColor[colorMode],\n    size: avatarSizes[size],\n    fontSize: fontSize\n  }, props), label);\n};\n\nvar AvatarGroup = function AvatarGroup(_ref2) {\n  var size = _ref2.size,\n      children = _ref2.children,\n      borderColor = _ref2.borderColor,\n      max = _ref2.max,\n      _ref2$spacing = _ref2.spacing,\n      spacing = _ref2$spacing === void 0 ? -3 : _ref2$spacing,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"size\", \"children\", \"borderColor\", \"max\", \"spacing\"]);\n\n  var validChildren = cleanChildren(children);\n  var count = validChildren.length;\n  var clones = validChildren.map(function (child, index) {\n    if (max && index > max) {\n      return null;\n    }\n\n    if (max == null || max && index < max) {\n      var isFirstAvatar = index === 0;\n      return cloneElement(child, {\n        ml: isFirstAvatar ? 0 : spacing,\n        size: size,\n        borderColor: borderColor || child.props.borderColor,\n        showBorder: true,\n        zIndex: count - index\n      });\n    }\n\n    if (max && index === max) {\n      return jsx(MoreAvatarLabel, {\n        key: index,\n        size: size,\n        ml: spacing,\n        label: \"+\" + (count - max)\n      });\n    }\n  });\n  return jsx(Flex, _extends({\n    alignItems: \"center\"\n  }, rest), clones);\n};\n\nexport default AvatarGroup;"]},"metadata":{},"sourceType":"module"}