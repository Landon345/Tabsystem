{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { createContext, useContext, useState } from \"react\";\nimport useDarkMode from \"use-dark-mode\"; // This context handles the color mode (light or dark) of the UI\n\nexport var ColorModeContext = createContext({\n  colorMode: \"light\",\n  toggleColorMode: function toggleColorMode() {}\n});\n\nvar ColorModeProvider = function ColorModeProvider(_ref) {\n  var value = _ref.value,\n      children = _ref.children;\n\n  var _useState = useState(value),\n      manualMode = _useState[0],\n      setManualMode = _useState[1];\n\n  var manualToggle = function manualToggle() {\n    if (manualMode === \"light\") {\n      setManualMode(\"dark\");\n    }\n\n    if (manualMode === \"dark\") {\n      setManualMode(\"light\");\n    }\n  };\n\n  var _useDarkMode = useDarkMode(false),\n      isDarkMode = _useDarkMode.value,\n      toggle = _useDarkMode.toggle;\n\n  var colorMode = isDarkMode ? \"dark\" : \"light\";\n  var childContext = value != null ? {\n    colorMode: manualMode,\n    toggleColorMode: manualToggle\n  } : {\n    colorMode: colorMode,\n    toggleColorMode: toggle\n  };\n  return jsx(ColorModeContext.Provider, {\n    value: childContext\n  }, children);\n};\n\nvar DarkMode = function DarkMode(props) {\n  return jsx(ColorModeProvider, _extends({\n    value: \"dark\"\n  }, props));\n};\n\nvar LightMode = function LightMode(props) {\n  return jsx(ColorModeProvider, _extends({\n    value: \"light\"\n  }, props));\n};\n\nvar useColorMode = function useColorMode() {\n  var context = useContext(ColorModeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n\n  return context;\n};\n\nexport default ColorModeProvider;\nexport { useColorMode, DarkMode, LightMode };","map":{"version":3,"sources":["/Users/landonschlangen/Documents/WebDevelopmentFolder/ReactApps/tabsystem/node_modules/@chakra-ui/core/dist/es/ColorModeProvider/index.js"],"names":["_extends","jsx","createContext","useContext","useState","useDarkMode","ColorModeContext","colorMode","toggleColorMode","ColorModeProvider","_ref","value","children","_useState","manualMode","setManualMode","manualToggle","_useDarkMode","isDarkMode","toggle","childContext","Provider","DarkMode","props","LightMode","useColorMode","context","undefined","Error"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AAEA;;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAAyC;;AAEzC,OAAO,IAAIC,gBAAgB,GAAGJ,aAAa,CAAC;AAC1CK,EAAAA,SAAS,EAAE,OAD+B;AAE1CC,EAAAA,eAAe,EAAE,SAASA,eAAT,GAA2B,CAAE;AAFJ,CAAD,CAApC;;AAKP,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,IAA3B,EAAiC;AACvD,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,QAAQ,GAAGF,IAAI,CAACE,QADpB;;AAGA,MAAIC,SAAS,GAAGT,QAAQ,CAACO,KAAD,CAAxB;AAAA,MACIG,UAAU,GAAGD,SAAS,CAAC,CAAD,CAD1B;AAAA,MAEIE,aAAa,GAAGF,SAAS,CAAC,CAAD,CAF7B;;AAIA,MAAIG,YAAY,GAAG,SAASA,YAAT,GAAwB;AACzC,QAAIF,UAAU,KAAK,OAAnB,EAA4B;AAC1BC,MAAAA,aAAa,CAAC,MAAD,CAAb;AACD;;AAED,QAAID,UAAU,KAAK,MAAnB,EAA2B;AACzBC,MAAAA,aAAa,CAAC,OAAD,CAAb;AACD;AACF,GARD;;AAUA,MAAIE,YAAY,GAAGZ,WAAW,CAAC,KAAD,CAA9B;AAAA,MACIa,UAAU,GAAGD,YAAY,CAACN,KAD9B;AAAA,MAEIQ,MAAM,GAAGF,YAAY,CAACE,MAF1B;;AAIA,MAAIZ,SAAS,GAAGW,UAAU,GAAG,MAAH,GAAY,OAAtC;AACA,MAAIE,YAAY,GAAGT,KAAK,IAAI,IAAT,GAAgB;AACjCJ,IAAAA,SAAS,EAAEO,UADsB;AAEjCN,IAAAA,eAAe,EAAEQ;AAFgB,GAAhB,GAGf;AACFT,IAAAA,SAAS,EAAEA,SADT;AAEFC,IAAAA,eAAe,EAAEW;AAFf,GAHJ;AAOA,SAAOlB,GAAG,CAACK,gBAAgB,CAACe,QAAlB,EAA4B;AACpCV,IAAAA,KAAK,EAAES;AAD6B,GAA5B,EAEPR,QAFO,CAAV;AAGD,CAjCD;;AAmCA,IAAIU,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACtC,SAAOtB,GAAG,CAACQ,iBAAD,EAAoBT,QAAQ,CAAC;AACrCW,IAAAA,KAAK,EAAE;AAD8B,GAAD,EAEnCY,KAFmC,CAA5B,CAAV;AAGD,CAJD;;AAMA,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBD,KAAnB,EAA0B;AACxC,SAAOtB,GAAG,CAACQ,iBAAD,EAAoBT,QAAQ,CAAC;AACrCW,IAAAA,KAAK,EAAE;AAD8B,GAAD,EAEnCY,KAFmC,CAA5B,CAAV;AAGD,CAJD;;AAMA,IAAIE,YAAY,GAAG,SAASA,YAAT,GAAwB;AACzC,MAAIC,OAAO,GAAGvB,UAAU,CAACG,gBAAD,CAAxB;;AAEA,MAAIoB,OAAO,KAAKC,SAAhB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,SAAOF,OAAP;AACD,CARD;;AAUA,eAAejB,iBAAf;AACA,SAASgB,YAAT,EAAuBH,QAAvB,EAAiCE,SAAjC","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\n\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport { createContext, useContext, useState } from \"react\";\nimport useDarkMode from \"use-dark-mode\"; // This context handles the color mode (light or dark) of the UI\n\nexport var ColorModeContext = createContext({\n  colorMode: \"light\",\n  toggleColorMode: function toggleColorMode() {}\n});\n\nvar ColorModeProvider = function ColorModeProvider(_ref) {\n  var value = _ref.value,\n      children = _ref.children;\n\n  var _useState = useState(value),\n      manualMode = _useState[0],\n      setManualMode = _useState[1];\n\n  var manualToggle = function manualToggle() {\n    if (manualMode === \"light\") {\n      setManualMode(\"dark\");\n    }\n\n    if (manualMode === \"dark\") {\n      setManualMode(\"light\");\n    }\n  };\n\n  var _useDarkMode = useDarkMode(false),\n      isDarkMode = _useDarkMode.value,\n      toggle = _useDarkMode.toggle;\n\n  var colorMode = isDarkMode ? \"dark\" : \"light\";\n  var childContext = value != null ? {\n    colorMode: manualMode,\n    toggleColorMode: manualToggle\n  } : {\n    colorMode: colorMode,\n    toggleColorMode: toggle\n  };\n  return jsx(ColorModeContext.Provider, {\n    value: childContext\n  }, children);\n};\n\nvar DarkMode = function DarkMode(props) {\n  return jsx(ColorModeProvider, _extends({\n    value: \"dark\"\n  }, props));\n};\n\nvar LightMode = function LightMode(props) {\n  return jsx(ColorModeProvider, _extends({\n    value: \"light\"\n  }, props));\n};\n\nvar useColorMode = function useColorMode() {\n  var context = useContext(ColorModeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n\n  return context;\n};\n\nexport default ColorModeProvider;\nexport { useColorMode, DarkMode, LightMode };"]},"metadata":{},"sourceType":"module"}