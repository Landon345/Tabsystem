{"ast":null,"code":"/** @jsx jsx */\nimport { jsx, ThemeContext } from \"@emotion/core\";\nimport { ThemeProvider as EmotionThemeProvider } from \"emotion-theming\";\nimport { useContext } from \"react\";\nimport theme from \"../theme\";\n\nvar ThemeProvider = function ThemeProvider(_ref) {\n  var theme = _ref.theme,\n      children = _ref.children;\n  return jsx(EmotionThemeProvider, {\n    theme: theme\n  }, children);\n};\n\nThemeProvider.defaultProps = {\n  theme: theme\n};\n\nvar useTheme = function useTheme() {\n  var theme = useContext(ThemeContext);\n\n  if (theme === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n\n  return theme;\n};\n\nexport default ThemeProvider;\nexport { useTheme };","map":{"version":3,"sources":["/Users/landonschlangen/Documents/WebDevelopmentFolder/ReactApps/tabsystem/node_modules/@chakra-ui/core/dist/es/ThemeProvider/index.js"],"names":["jsx","ThemeContext","ThemeProvider","EmotionThemeProvider","useContext","theme","_ref","children","defaultProps","useTheme","undefined","Error"],"mappings":"AAAA;AACA,SAASA,GAAT,EAAcC,YAAd,QAAkC,eAAlC;AACA,SAASC,aAAa,IAAIC,oBAA1B,QAAsD,iBAAtD;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,IAAIH,aAAa,GAAG,SAASA,aAAT,CAAuBI,IAAvB,EAA6B;AAC/C,MAAID,KAAK,GAAGC,IAAI,CAACD,KAAjB;AAAA,MACIE,QAAQ,GAAGD,IAAI,CAACC,QADpB;AAEA,SAAOP,GAAG,CAACG,oBAAD,EAAuB;AAC/BE,IAAAA,KAAK,EAAEA;AADwB,GAAvB,EAEPE,QAFO,CAAV;AAGD,CAND;;AAQAL,aAAa,CAACM,YAAd,GAA6B;AAC3BH,EAAAA,KAAK,EAAEA;AADoB,CAA7B;;AAIA,IAAII,QAAQ,GAAG,SAASA,QAAT,GAAoB;AACjC,MAAIJ,KAAK,GAAGD,UAAU,CAACH,YAAD,CAAtB;;AAEA,MAAII,KAAK,KAAKK,SAAd,EAAyB;AACvB,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,SAAON,KAAP;AACD,CARD;;AAUA,eAAeH,aAAf;AACA,SAASO,QAAT","sourcesContent":["/** @jsx jsx */\nimport { jsx, ThemeContext } from \"@emotion/core\";\nimport { ThemeProvider as EmotionThemeProvider } from \"emotion-theming\";\nimport { useContext } from \"react\";\nimport theme from \"../theme\";\n\nvar ThemeProvider = function ThemeProvider(_ref) {\n  var theme = _ref.theme,\n      children = _ref.children;\n  return jsx(EmotionThemeProvider, {\n    theme: theme\n  }, children);\n};\n\nThemeProvider.defaultProps = {\n  theme: theme\n};\n\nvar useTheme = function useTheme() {\n  var theme = useContext(ThemeContext);\n\n  if (theme === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n\n  return theme;\n};\n\nexport default ThemeProvider;\nexport { useTheme };"]},"metadata":{},"sourceType":"module"}