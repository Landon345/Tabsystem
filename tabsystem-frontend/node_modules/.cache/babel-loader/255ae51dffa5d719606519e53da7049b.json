{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { useId } from \"@reach/auto-id\";\nimport { cloneElement, useRef, useState } from \"react\";\nimport Box from \"../Box\";\nimport { cleanChildren } from \"../utils\";\n\nvar CheckboxGroup = function CheckboxGroup(_ref) {\n  var onChange = _ref.onChange,\n      name = _ref.name,\n      variantColor = _ref.variantColor,\n      size = _ref.size,\n      defaultValue = _ref.defaultValue,\n      isInline = _ref.isInline,\n      valueProp = _ref.value,\n      _ref$spacing = _ref.spacing,\n      spacing = _ref$spacing === void 0 ? 2 : _ref$spacing,\n      children = _ref.children,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"onChange\", \"name\", \"variantColor\", \"size\", \"defaultValue\", \"isInline\", \"value\", \"spacing\", \"children\"]);\n\n  var _useState = useState(defaultValue || []),\n      values = _useState[0],\n      setValues = _useState[1];\n\n  var _useRef = useRef(valueProp != null),\n      isControlled = _useRef.current;\n\n  var _values = isControlled ? valueProp : values;\n\n  var _onChange = function _onChange(event) {\n    var _event$target = event.target,\n        checked = _event$target.checked,\n        value = _event$target.value;\n    var newValues;\n\n    if (checked) {\n      newValues = [].concat(_values, [value]);\n    } else {\n      newValues = _values.filter(function (val) {\n        return val !== value;\n      });\n    }\n\n    !isControlled && setValues(newValues);\n    onChange && onChange(newValues);\n  }; // If no name is passed, we'll generate a random, unique name\n\n\n  var fallbackName = \"checkbox-\" + useId();\n\n  var _name = name || fallbackName;\n\n  var validChildren = cleanChildren(children);\n  var clones = validChildren.map(function (child, index) {\n    var isLastCheckbox = validChildren.length === index + 1;\n    var spacingProps = isInline ? {\n      mr: spacing\n    } : {\n      mb: spacing\n    };\n    return jsx(Box, _extends({\n      key: index,\n      display: isInline ? \"inline-block\" : \"block\"\n    }, !isLastCheckbox && spacingProps), cloneElement(child, {\n      size: size,\n      variantColor: variantColor,\n      name: _name + \"-\" + index,\n      onChange: _onChange,\n      isChecked: _values.includes(child.props.value)\n    }));\n  });\n  return jsx(Box, _extends({\n    role: \"group\"\n  }, rest), clones);\n};\n\nexport default CheckboxGroup;","map":{"version":3,"sources":["/Users/landonschlangen/Documents/WebDevelopmentFolder/ReactApps/tabsystem/node_modules/@chakra-ui/core/dist/es/CheckboxGroup/index.js"],"names":["_extends","_objectWithoutPropertiesLoose","jsx","useId","cloneElement","useRef","useState","Box","cleanChildren","CheckboxGroup","_ref","onChange","name","variantColor","size","defaultValue","isInline","valueProp","value","_ref$spacing","spacing","children","rest","_useState","values","setValues","_useRef","isControlled","current","_values","_onChange","event","_event$target","target","checked","newValues","concat","filter","val","fallbackName","_name","validChildren","clones","map","child","index","isLastCheckbox","length","spacingProps","mr","mb","key","display","isChecked","includes","props","role"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport { useId } from \"@reach/auto-id\";\nimport { cloneElement, useRef, useState } from \"react\";\nimport Box from \"../Box\";\nimport { cleanChildren } from \"../utils\";\n\nvar CheckboxGroup = function CheckboxGroup(_ref) {\n  var onChange = _ref.onChange,\n      name = _ref.name,\n      variantColor = _ref.variantColor,\n      size = _ref.size,\n      defaultValue = _ref.defaultValue,\n      isInline = _ref.isInline,\n      valueProp = _ref.value,\n      _ref$spacing = _ref.spacing,\n      spacing = _ref$spacing === void 0 ? 2 : _ref$spacing,\n      children = _ref.children,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"onChange\", \"name\", \"variantColor\", \"size\", \"defaultValue\", \"isInline\", \"value\", \"spacing\", \"children\"]);\n\n  var _useState = useState(defaultValue || []),\n      values = _useState[0],\n      setValues = _useState[1];\n\n  var _useRef = useRef(valueProp != null),\n      isControlled = _useRef.current;\n\n  var _values = isControlled ? valueProp : values;\n\n  var _onChange = function _onChange(event) {\n    var _event$target = event.target,\n        checked = _event$target.checked,\n        value = _event$target.value;\n    var newValues;\n\n    if (checked) {\n      newValues = [].concat(_values, [value]);\n    } else {\n      newValues = _values.filter(function (val) {\n        return val !== value;\n      });\n    }\n\n    !isControlled && setValues(newValues);\n    onChange && onChange(newValues);\n  }; // If no name is passed, we'll generate a random, unique name\n\n\n  var fallbackName = \"checkbox-\" + useId();\n\n  var _name = name || fallbackName;\n\n  var validChildren = cleanChildren(children);\n  var clones = validChildren.map(function (child, index) {\n    var isLastCheckbox = validChildren.length === index + 1;\n    var spacingProps = isInline ? {\n      mr: spacing\n    } : {\n      mb: spacing\n    };\n    return jsx(Box, _extends({\n      key: index,\n      display: isInline ? \"inline-block\" : \"block\"\n    }, !isLastCheckbox && spacingProps), cloneElement(child, {\n      size: size,\n      variantColor: variantColor,\n      name: _name + \"-\" + index,\n      onChange: _onChange,\n      isChecked: _values.includes(child.props.value)\n    }));\n  });\n  return jsx(Box, _extends({\n    role: \"group\"\n  }, rest), clones);\n};\n\nexport default CheckboxGroup;"]},"metadata":{},"sourceType":"module"}