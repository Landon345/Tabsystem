{"ast":null,"code":"import React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar statusIdle = 'idle';\nvar statusLoading = 'loading';\nvar statusError = 'error';\nvar statusSuccess = 'success';\nvar _uid = 0;\n\nvar uid = function uid() {\n  return _uid++;\n};\n\nvar cancelledError = {};\nvar isServer = typeof window === 'undefined';\n\nfunction noop() {\n  return void 0;\n}\n\nfunction identity(d) {\n  return d;\n}\n\nvar Console = console || {\n  error: noop,\n  warn: noop,\n  log: noop\n};\n\nfunction setConsole(c) {\n  Console = c;\n}\n\nfunction functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater;\n}\n\nfunction stableStringifyReplacer(_, value) {\n  return isObject(value) ? Object.assign.apply(Object, [{}].concat(Object.keys(value).sort().map(function (key) {\n    var _ref;\n\n    return _ref = {}, _ref[key] = value[key], _ref;\n  }))) : value;\n}\n\nfunction stableStringify(obj) {\n  return JSON.stringify(obj, stableStringifyReplacer);\n}\n\nfunction isObject(a) {\n  return a && typeof a === 'object' && !Array.isArray(a);\n}\n\nfunction deepIncludes(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(function (key) {\n      return !deepIncludes(a[key], b[key]);\n    });\n  }\n\n  return false;\n}\n\nfunction isDocumentVisible() {\n  return typeof document === 'undefined' || document.visibilityState === undefined || document.visibilityState === 'visible' || document.visibilityState === 'prerender';\n}\n\nfunction isOnline() {\n  return navigator.onLine === undefined || navigator.onLine;\n}\n\nfunction getQueryArgs(args) {\n  if (isObject(args[0])) {\n    var _args$ = args[0],\n        _queryKey = _args$.queryKey,\n        _queryFn = _args$.queryFn,\n        _config = _args$.config;\n    args = [_queryKey, _queryFn, _config].concat(args.slice(1));\n  } else if (isObject(args[1])) {\n    var _args = args,\n        _queryKey2 = _args[0],\n        _config2 = _args[1],\n        _rest = _args.slice(2);\n\n    args = [_queryKey2, undefined, _config2].concat(_rest);\n  }\n\n  var _args2 = args,\n      queryKey = _args2[0],\n      queryFn = _args2[1],\n      _args2$ = _args2[2],\n      config = _args2$ === void 0 ? {} : _args2$,\n      rest = _args2.slice(3);\n\n  queryFn = queryFn || config.queryFn;\n  return [queryKey, queryFn ? _extends({}, config, {\n    queryFn: queryFn\n  }) : config].concat(rest);\n} // This deep-equal is directly based on https://github.com/epoberezkin/fast-deep-equal.\n// The parts for comparing any non-JSON-supported values has been removed\n\n\nfunction deepEqual(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var length, i, keys;\n\n    if (Array.isArray(a)) {\n      length = a.length; // eslint-disable-next-line eqeqeq\n\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) {\n        if (!deepEqual(a[i], b[i])) return false;\n      }\n\n      return true;\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    }\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n      if (!deepEqual(a[key], b[key])) return false;\n    }\n\n    return true;\n  } // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n\n\n  return a !== a && b !== b;\n}\n\nfunction getStatusBools(status) {\n  return {\n    isLoading: status === statusLoading,\n    isSuccess: status === statusSuccess,\n    isError: status === statusError,\n    isIdle: status === statusIdle\n  };\n}\n\nvar DEFAULT_CONFIG = {\n  shared: {\n    suspense: false\n  },\n  queries: {\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    queryFn: undefined,\n    initialStale: undefined,\n    enabled: true,\n    retry: 3,\n    retryDelay: function retryDelay(attemptIndex) {\n      return Math.min(1000 * Math.pow(2, attemptIndex), 30000);\n    },\n    staleTime: 0,\n    cacheTime: 5 * 60 * 1000,\n    refetchOnWindowFocus: true,\n    refetchInterval: false,\n    queryFnParamsFilter: identity,\n    refetchOnMount: true,\n    isDataEqual: deepEqual,\n    onError: noop,\n    onSuccess: noop,\n    onSettled: noop,\n    useErrorBoundary: false\n  },\n  mutations: {\n    throwOnError: false,\n    onMutate: noop,\n    onError: noop,\n    onSuccess: noop,\n    onSettled: noop,\n    useErrorBoundary: false\n  }\n};\nvar defaultConfigRef = {\n  current: DEFAULT_CONFIG\n};\n\nfunction defaultQueryKeySerializerFn(queryKey) {\n  if (!queryKey) {\n    return [];\n  }\n\n  if (!Array.isArray(queryKey)) {\n    queryKey = [queryKey];\n  }\n\n  if (queryKey.some(function (d) {\n    return typeof d === 'function';\n  })) {\n    throw new Error('A valid query key is required!');\n  }\n\n  var queryHash = stableStringify(queryKey);\n  queryKey = JSON.parse(queryHash);\n\n  if (!queryHash) {\n    return [];\n  }\n\n  return [queryHash, queryKey];\n}\n\nfunction _empty() {}\n\nfunction _awaitIgnored(value, direct) {\n  if (!direct) {\n    return value && value.then ? value.then(_empty) : Promise.resolve();\n  }\n}\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction _continueIgnored(value) {\n  if (value && value.then) {\n    return value.then(_empty);\n  }\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction makeQueryInstance(query, onStateUpdate) {\n  var instance = {\n    id: uid(),\n    onStateUpdate: onStateUpdate\n  };\n\n  instance.clearInterval = function () {\n    clearInterval(instance.refetchIntervalId);\n    delete instance.refetchIntervalId;\n  };\n\n  instance.updateConfig = function (config) {\n    var oldConfig = instance.config; // Update the config\n\n    instance.config = config;\n\n    if (!isServer) {\n      if ((oldConfig == null ? void 0 : oldConfig.refetchInterval) === config.refetchInterval) {\n        return;\n      }\n\n      query.clearIntervals();\n      var minInterval = Math.min.apply(Math, query.instances.map(function (d) {\n        return d.config.refetchInterval || Infinity;\n      }));\n\n      if (!instance.refetchIntervalId && minInterval > 0 && minInterval < Infinity) {\n        instance.refetchIntervalId = setInterval(function () {\n          if (query.instances.some(function (instance) {\n            return instance.config.enabled;\n          }) && (isDocumentVisible() || query.instances.some(function (instance) {\n            return instance.config.refetchIntervalInBackground;\n          }))) {\n            query.fetch();\n          }\n        }, minInterval);\n      }\n    }\n  };\n\n  instance.run = _async(function () {\n    return _continueIgnored(_catch(function () {\n      // Perform the refetch for this query if necessary\n      return _invoke(function () {\n        if (query.config.enabled && // Don't auto refetch if disabled\n        !query.wasSuspended && // Don't double refetch for suspense\n        query.state.isStale && ( // Only refetch if stale\n        query.config.refetchOnMount || query.instances.length === 1)) {\n          return _awaitIgnored(query.fetch());\n        }\n      }, function () {\n        query.wasSuspended = false;\n      });\n    }, function (error) {\n      Console.error(error);\n    }));\n  });\n\n  instance.unsubscribe = function () {\n    query.instances = query.instances.filter(function (d) {\n      return d.id !== instance.id;\n    });\n\n    if (!query.instances.length) {\n      instance.clearInterval();\n      query.cancel();\n\n      if (!isServer) {\n        // Schedule garbage collection\n        query.scheduleGarbageCollection();\n      }\n    }\n  };\n\n  return instance;\n}\n\nfunction _empty$1() {}\n\nvar actionInit = 'Init';\n\nfunction _awaitIgnored$1(value, direct) {\n  if (!direct) {\n    return value && value.then ? value.then(_empty$1) : Promise.resolve();\n  }\n}\n\nvar actionFailed = 'Failed';\n\nfunction _catch$1(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nvar actionMarkStale = 'MarkStale';\n\nfunction _continueIgnored$1(value) {\n  if (value && value.then) {\n    return value.then(_empty$1);\n  }\n}\n\nvar actionMarkGC = 'MarkGC';\n\nfunction _async$1(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nvar actionFetch = 'Fetch';\n\nfunction _await(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nvar actionSuccess = 'Success';\n\nfunction _invoke$1(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nvar actionError = 'Error';\n\nfunction _invokeIgnored(body) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(_empty$1);\n  }\n}\n\nvar actionSetState = 'SetState';\n\nfunction _settle(pact, state, value) {\n  if (!pact.s) {\n    if (value instanceof _Pact) {\n      if (value.s) {\n        if (state & 1) {\n          state = value.s;\n        }\n\n        value = value.v;\n      } else {\n        value.o = _settle.bind(null, pact, state);\n        return;\n      }\n    }\n\n    if (value && value.then) {\n      value.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n      return;\n    }\n\n    pact.s = state;\n    pact.v = value;\n    var observer = pact.o;\n\n    if (observer) {\n      observer(pact);\n    }\n  }\n}\n\nvar _Pact = /*#__PURE__*/function () {\n  function _Pact() {}\n\n  _Pact.prototype.then = function (onFulfilled, onRejected) {\n    var result = new _Pact();\n    var state = this.s;\n\n    if (state) {\n      var callback = state & 1 ? onFulfilled : onRejected;\n\n      if (callback) {\n        try {\n          _settle(result, 1, callback(this.v));\n        } catch (e) {\n          _settle(result, 2, e);\n        }\n\n        return result;\n      } else {\n        return this;\n      }\n    }\n\n    this.o = function (_this) {\n      try {\n        var value = _this.v;\n\n        if (_this.s & 1) {\n          _settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n        } else if (onRejected) {\n          _settle(result, 1, onRejected(value));\n        } else {\n          _settle(result, 2, value);\n        }\n      } catch (e) {\n        _settle(result, 2, e);\n      }\n    };\n\n    return result;\n  };\n\n  return _Pact;\n}();\n\nfunction _isSettledPact(thenable) {\n  return thenable instanceof _Pact && thenable.s & 1;\n}\n\nfunction _do(body, test) {\n  var awaitBody;\n\n  do {\n    var result = body();\n\n    if (result && result.then) {\n      if (_isSettledPact(result)) {\n        result = result.v;\n      } else {\n        awaitBody = true;\n        break;\n      }\n    }\n\n    var shouldContinue = test();\n\n    if (_isSettledPact(shouldContinue)) {\n      shouldContinue = shouldContinue.v;\n    }\n\n    if (!shouldContinue) {\n      return result;\n    }\n  } while (!shouldContinue.then);\n\n  var pact = new _Pact();\n\n  var reject = _settle.bind(null, pact, 2);\n\n  (awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n  return pact;\n\n  function _resumeAfterBody(value) {\n    result = value;\n\n    for (;;) {\n      shouldContinue = test();\n\n      if (_isSettledPact(shouldContinue)) {\n        shouldContinue = shouldContinue.v;\n      }\n\n      if (!shouldContinue) {\n        break;\n      }\n\n      if (shouldContinue.then) {\n        shouldContinue.then(_resumeAfterTest).then(void 0, reject);\n        return;\n      }\n\n      result = body();\n\n      if (result && result.then) {\n        if (_isSettledPact(result)) {\n          result = result.v;\n        } else {\n          result.then(_resumeAfterBody).then(void 0, reject);\n          return;\n        }\n      }\n    }\n\n    _settle(pact, 1, result);\n  }\n\n  function _resumeAfterTest(shouldContinue) {\n    if (shouldContinue) {\n      do {\n        result = body();\n\n        if (result && result.then) {\n          if (_isSettledPact(result)) {\n            result = result.v;\n          } else {\n            result.then(_resumeAfterBody).then(void 0, reject);\n            return;\n          }\n        }\n\n        shouldContinue = test();\n\n        if (_isSettledPact(shouldContinue)) {\n          shouldContinue = shouldContinue.v;\n        }\n\n        if (!shouldContinue) {\n          _settle(pact, 1, result);\n\n          return;\n        }\n      } while (!shouldContinue.then);\n\n      shouldContinue.then(_resumeAfterTest).then(void 0, reject);\n    } else {\n      _settle(pact, 1, result);\n    }\n  }\n}\n\nfunction _continue(value, then) {\n  return value && value.then ? value.then(then) : then(value);\n}\n\nfunction _rethrow(thrown, value) {\n  if (thrown) throw value;\n  return value;\n}\n\nfunction _finallyRethrows(body, finalizer) {\n  try {\n    var result = body();\n  } catch (e) {\n    return finalizer(true, e);\n  }\n\n  if (result && result.then) {\n    return result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n  }\n\n  return finalizer(false, result);\n}\n\nfunction makeQuery(_ref) {\n  var _config$initialStale;\n\n  var queryCache = _ref.queryCache,\n      queryKey = _ref.queryKey,\n      queryHash = _ref.queryHash,\n      config = _ref.config,\n      notifyGlobalListeners = _ref.notifyGlobalListeners;\n  var initialData = typeof config.initialData === 'function' ? config.initialData() : config.initialData;\n  var hasInitialData = typeof initialData !== 'undefined';\n  var isStale = !config.enabled || (typeof config.initialStale === 'function' ? config.initialStale() : (_config$initialStale = config.initialStale) != null ? _config$initialStale : !hasInitialData);\n  var initialStatus = hasInitialData ? statusSuccess : config.enabled ? statusLoading : statusIdle;\n  var query = {\n    queryKey: queryKey,\n    queryHash: queryHash,\n    config: config,\n    instances: [],\n    state: queryReducer(undefined, {\n      type: actionInit,\n      initialStatus: initialStatus,\n      initialData: initialData,\n      hasInitialData: hasInitialData,\n      isStale: isStale\n    })\n  };\n\n  query.dispatch = function (action) {\n    query.state = queryReducer(query.state, action);\n    query.instances.forEach(function (d) {\n      return d.onStateUpdate(query.state);\n    });\n    notifyGlobalListeners();\n  };\n\n  query.scheduleStaleTimeout = function () {\n    if (isServer) return;\n    clearTimeout(query.staleTimeout);\n\n    if (query.config.staleTime === Infinity) {\n      return;\n    }\n\n    query.staleTimeout = setTimeout(function () {\n      if (queryCache.getQuery(query.queryKey)) {\n        query.invalidate();\n      }\n    }, query.config.staleTime);\n  };\n\n  query.invalidate = function () {\n    clearTimeout(query.staleTimeout);\n    query.dispatch({\n      type: actionMarkStale\n    });\n  };\n\n  query.scheduleGarbageCollection = function () {\n    if (!queryCache.queries[query.queryHash]) return;\n\n    if (query.config.cacheTime === Infinity) {\n      return;\n    }\n\n    query.dispatch({\n      type: actionMarkGC\n    });\n    query.cacheTimeout = setTimeout(function () {\n      queryCache.removeQueries(function (d) {\n        return d.state.markedForGarbageCollection && d.queryHash === query.queryHash;\n      });\n    }, typeof query.state.data === 'undefined' && query.state.status !== 'error' ? 0 : query.config.cacheTime);\n  };\n\n  query.refetch = _async$1(function () {\n    return _continueIgnored$1(_catch$1(function () {\n      return _awaitIgnored$1(query.fetch());\n    }, function (error) {\n      Console.error(error);\n    }));\n  });\n\n  query.heal = function () {\n    // Stop the query from being garbage collected\n    clearTimeout(query.cacheTimeout); // Mark the query as not cancelled\n\n    query.cancelled = null;\n  };\n\n  query.cancel = function () {\n    query.cancelled = cancelledError;\n\n    if (query.cancelPromises) {\n      query.cancelPromises();\n    }\n\n    delete query.promise;\n  };\n\n  query.clearIntervals = function () {\n    query.instances.forEach(function (instance) {\n      instance.clearInterval();\n    });\n  };\n\n  query.setState = function (updater) {\n    return query.dispatch({\n      type: actionSetState,\n      updater: updater\n    });\n  };\n\n  query.setData = function (updater) {\n    // Set data and mark it as cached\n    query.dispatch({\n      type: actionSuccess,\n      updater: updater\n    }); // Schedule a fresh invalidation!\n\n    query.scheduleStaleTimeout();\n  };\n\n  query.clear = function () {\n    clearTimeout(query.staleTimeout);\n    clearTimeout(query.cacheTimeout);\n    clearTimeout(query.retryTimeout);\n    query.clearIntervals();\n    query.cancel();\n    query.dispatch = noop;\n    delete queryCache.queries[query.queryHash];\n    notifyGlobalListeners();\n  };\n\n  query.subscribe = function (onStateUpdate) {\n    if (onStateUpdate === void 0) {\n      onStateUpdate = noop;\n    }\n\n    var instance = makeQueryInstance(query, onStateUpdate);\n    query.instances.push(instance);\n    query.heal();\n    return instance;\n  }; // Set up the core fetcher function\n\n\n  var tryFetchData = _async$1(function (fn) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return _catch$1(function () {\n      // Perform the query\n      var promise = fn.apply(void 0, query.config.queryFnParamsFilter(args));\n\n      query.cancelPromises = function () {\n        return promise.cancel == null ? void 0 : promise.cancel();\n      };\n\n      return _await(promise, function (data) {\n        delete query.shouldContinueRetryOnFocus;\n        delete query.cancelPromises;\n        if (query.cancelled) throw query.cancelled;\n        return data;\n      });\n    }, function (error) {\n      var _exit = false;\n      delete query.cancelPromises;\n      if (query.cancelled) throw query.cancelled; // If we fail, increase the failureCount\n\n      query.dispatch({\n        type: actionFailed\n      }); // Do we need to retry the request?\n\n      return _invoke$1(function () {\n        if (query.config.retry === true || query.state.failureCount <= query.config.retry || typeof query.config.retry === 'function' && query.config.retry(query.state.failureCount, error)) {\n          // Only retry if the document is visible\n          if (!isDocumentVisible()) {\n            // set this flag to continue retries on focus\n            query.shouldContinueRetryOnFocus = true; // Resolve a\n\n            _exit = true;\n            return new Promise(noop);\n          }\n\n          delete query.shouldContinueRetryOnFocus; // Determine the retryDelay\n\n          var delay = functionalUpdate(query.config.retryDelay, query.state.failureCount); // Return a new promise with the retry\n\n          _exit = true;\n          return _await(new Promise(function (resolve, reject) {\n            // Keep track of the retry timeout\n            query.retryTimeout = setTimeout(_async$1(function () {\n              return query.cancelled ? reject(query.cancelled) : _catch$1(function () {\n                return _await(tryFetchData.apply(void 0, [fn].concat(args)), function (data) {\n                  if (query.cancelled) return reject(query.cancelled);\n                  resolve(data);\n                });\n              }, function (error) {\n                if (query.cancelled) return reject(query.cancelled);\n                reject(error);\n              });\n            }), delay);\n          }));\n        }\n      }, function (_result) {\n        if (_exit) return _result;\n        throw error;\n      });\n    });\n  });\n\n  query.fetch = _async$1(function (_temp) {\n    var _ref2 = _temp === void 0 ? {} : _temp,\n        fetchMore = _ref2.fetchMore;\n\n    var queryFn = query.config.queryFn;\n\n    if (!queryFn) {\n      return;\n    }\n\n    if (query.config.infinite) {\n      var originalQueryFn = queryFn;\n      queryFn = _async$1(function () {\n        var _interrupt = false;\n        var data = [];\n        var pageVariables = [].concat(query.pageVariables);\n        var rebuiltPageVariables = [];\n        return _continue(_do(function () {\n          var args = pageVariables.shift();\n          return _invokeIgnored(function () {\n            if (!data.length) {\n              var _push3 = data.push; // the first page query doesn't need to be rebuilt\n\n              return _await(originalQueryFn.apply(void 0, args), function (_originalQueryFn) {\n                _push3.call(data, _originalQueryFn);\n\n                rebuiltPageVariables.push(args);\n              });\n            } else {\n              // get an up-to-date cursor based on the previous data set\n              var nextCursor = query.config.getFetchMore(data[data.length - 1], data); // break early if there's no next cursor\n              // otherwise we'll start from the beginning\n              // which will cause unwanted duplication\n\n              if (!nextCursor) {\n                _interrupt = true;\n                return;\n              }\n\n              var pageArgs = [].concat(args.slice(0, -1), [nextCursor]);\n              var _push4 = data.push;\n              return _await(originalQueryFn.apply(void 0, pageArgs), function (_originalQueryFn2) {\n                _push4.call(data, _originalQueryFn2);\n\n                rebuiltPageVariables.push(pageArgs);\n              });\n            }\n          });\n        }, function () {\n          return !_interrupt && !!pageVariables.length;\n        }), function () {\n          query.state.canFetchMore = query.config.getFetchMore(data[data.length - 1], data);\n          query.pageVariables = rebuiltPageVariables;\n          return data;\n        });\n      });\n\n      if (fetchMore) {\n        queryFn = _async$1(function () {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          var fetchMoreInfo = fetchMore.fetchMoreInfo,\n              previous = fetchMore.previous;\n          return _finallyRethrows(function () {\n            query.setState(function (old) {\n              return _extends({}, old, {\n                isFetchingMore: previous ? 'previous' : 'next'\n              });\n            });\n            var newArgs = [].concat(args, [fetchMoreInfo]);\n            query.pageVariables[previous ? 'unshift' : 'push'](newArgs);\n            return _await(originalQueryFn.apply(void 0, newArgs), function (newData) {\n              var data = previous ? [newData].concat(query.state.data) : [].concat(query.state.data, [newData]);\n              query.state.canFetchMore = query.config.getFetchMore(newData, data);\n              return data;\n            });\n          }, function (_wasThrown, _result3) {\n            query.setState(function (old) {\n              return _extends({}, old, {\n                isFetchingMore: false\n              });\n            });\n            return _rethrow(_wasThrown, _result3);\n          });\n        });\n      }\n    } // Create a new promise for the query cache if necessary\n\n\n    if (!query.promise) {\n      query.promise = _async$1(function () {\n        // If there are any retries pending for this query, kill them\n        query.cancelled = null;\n\n        var getCallbackInstances = function getCallbackInstances() {\n          var callbackInstances = [].concat(query.instances);\n\n          if (query.wasSuspended) {\n            callbackInstances.unshift(query.fallbackInstance);\n          }\n\n          return callbackInstances;\n        };\n\n        return _catch$1(function () {\n          // Set up the query refreshing state\n          query.dispatch({\n            type: actionFetch\n          }); // Try to get the data\n\n          return _await(tryFetchData.apply(void 0, [queryFn].concat(query.queryKey)), function (data) {\n            query.setData(function (old) {\n              return query.config.isDataEqual(old, data) ? old : data;\n            });\n            getCallbackInstances().forEach(function (instance) {\n              return instance.config.onSuccess && instance.config.onSuccess(query.state.data);\n            });\n            getCallbackInstances().forEach(function (instance) {\n              return instance.config.onSettled && instance.config.onSettled(query.state.data, null);\n            });\n            delete query.promise;\n            return data;\n          });\n        }, function (error) {\n          query.dispatch({\n            type: actionError,\n            cancelled: error === query.cancelled,\n            error: error\n          });\n          delete query.promise;\n\n          if (error !== query.cancelled) {\n            getCallbackInstances().forEach(function (instance) {\n              return instance.config.onError && instance.config.onError(error);\n            });\n            getCallbackInstances().forEach(function (instance) {\n              return instance.config.onSettled && instance.config.onSettled(undefined, error);\n            });\n            throw error;\n          }\n        });\n      })();\n    }\n\n    return query.promise;\n  });\n\n  if (query.config.infinite) {\n    query.fetchMore = function (fetchMoreInfo, _temp2) {\n      if (fetchMoreInfo === void 0) {\n        fetchMoreInfo = query.state.canFetchMore;\n      }\n\n      var _ref3 = _temp2 === void 0 ? {} : _temp2,\n          _ref3$previous = _ref3.previous,\n          previous = _ref3$previous === void 0 ? false : _ref3$previous;\n\n      return query.fetch({\n        fetchMore: {\n          fetchMoreInfo: fetchMoreInfo,\n          previous: previous\n        }\n      });\n    };\n  }\n\n  return query;\n}\n\nfunction queryReducer(state, action) {\n  var newState = switchActions(state, action);\n  return Object.assign(newState, getStatusBools(newState.status));\n}\n\nfunction switchActions(state, action) {\n  switch (action.type) {\n    case actionInit:\n      return {\n        status: action.initialStatus,\n        error: null,\n        isFetching: action.initialStatus === 'loading',\n        failureCount: 0,\n        isStale: action.isStale,\n        markedForGarbageCollection: false,\n        data: action.initialData,\n        updatedAt: action.hasInitialData ? Date.now() : 0\n      };\n\n    case actionFailed:\n      return _extends({}, state, {\n        failureCount: state.failureCount + 1\n      });\n\n    case actionMarkStale:\n      return _extends({}, state, {\n        isStale: true\n      });\n\n    case actionMarkGC:\n      {\n        return _extends({}, state, {\n          markedForGarbageCollection: true\n        });\n      }\n\n    case actionFetch:\n      return _extends({}, state, {\n        status: typeof state.data !== 'undefined' ? statusSuccess : statusLoading,\n        isFetching: true,\n        failureCount: 0\n      });\n\n    case actionSuccess:\n      return _extends({}, state, {\n        status: statusSuccess,\n        data: functionalUpdate(action.updater, state.data),\n        error: null,\n        isStale: false,\n        isFetching: false,\n        updatedAt: Date.now(),\n        failureCount: 0\n      });\n\n    case actionError:\n      return _extends({}, state, {\n        isFetching: false,\n        isStale: true\n      }, !action.cancelled && {\n        status: statusError,\n        error: action.error,\n        throwInErrorBoundary: true\n      });\n\n    case actionSetState:\n      return functionalUpdate(action.updater, state);\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction _await$1(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction _catch$2(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction _async$2(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction _empty$2() {}\n\nfunction _awaitIgnored$2(value, direct) {\n  if (!direct) {\n    return value && value.then ? value.then(_empty$2) : Promise.resolve();\n  }\n}\n\nfunction _invoke$2(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nvar queryCache = makeQueryCache();\nvar queryCaches = [queryCache];\n\nfunction makeQueryCache(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$frozen = _ref.frozen,\n      frozen = _ref$frozen === void 0 ? isServer : _ref$frozen,\n      defaultConfig = _ref.defaultConfig; // A frozen cache does not add new queries to the cache\n\n\n  var globalListeners = [];\n  var configRef = defaultConfig ? {\n    current: _extends({}, defaultConfigRef.current, defaultConfig)\n  } : defaultConfigRef;\n  var queryCache = {\n    queries: {},\n    isFetching: 0\n  };\n\n  var notifyGlobalListeners = function notifyGlobalListeners() {\n    queryCache.isFetching = Object.values(queryCache.queries).reduce(function (acc, query) {\n      return query.state.isFetching ? acc + 1 : acc;\n    }, 0);\n    globalListeners.forEach(function (d) {\n      return d(queryCache);\n    });\n  };\n\n  queryCache.subscribe = function (cb) {\n    globalListeners.push(cb);\n    return function () {\n      globalListeners.splice(globalListeners.indexOf(cb), 1);\n    };\n  };\n\n  queryCache.clear = function (_temp2) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        _ref2$notify = _ref2.notify,\n        notify = _ref2$notify === void 0 ? true : _ref2$notify;\n\n    Object.values(queryCache.queries).forEach(function (query) {\n      return query.clear();\n    });\n    queryCache.queries = {};\n\n    if (notify) {\n      notifyGlobalListeners();\n    }\n  };\n\n  queryCache.getQueries = function (predicate, _temp3) {\n    var _ref3 = _temp3 === void 0 ? {} : _temp3,\n        exact = _ref3.exact;\n\n    if (predicate === true) {\n      return Object.values(queryCache.queries);\n    }\n\n    if (typeof predicate !== 'function') {\n      var _configRef$current$qu = configRef.current.queries.queryKeySerializerFn(predicate),\n          queryHash = _configRef$current$qu[0],\n          queryKey = _configRef$current$qu[1];\n\n      predicate = function predicate(d) {\n        return exact ? d.queryHash === queryHash : deepIncludes(d.queryKey, queryKey);\n      };\n    }\n\n    return Object.values(queryCache.queries).filter(predicate);\n  };\n\n  queryCache.getQuery = function (queryKey) {\n    return queryCache.getQueries(queryKey, {\n      exact: true\n    })[0];\n  };\n\n  queryCache.getQueryData = function (queryKey) {\n    var _queryCache$getQuery;\n\n    return (_queryCache$getQuery = queryCache.getQuery(queryKey)) == null ? void 0 : _queryCache$getQuery.state.data;\n  };\n\n  queryCache.removeQueries = function () {\n    queryCache.getQueries.apply(queryCache, arguments).forEach(function (query) {\n      return query.clear();\n    });\n  };\n\n  queryCache.cancelQueries = function () {\n    queryCache.getQueries.apply(queryCache, arguments).forEach(function (query) {\n      return query.cancel();\n    });\n  };\n\n  queryCache.invalidateQueries = _async$2(function (predicate, _temp4) {\n    var _ref4 = _temp4 === void 0 ? {} : _temp4,\n        _ref4$refetchActive = _ref4.refetchActive,\n        refetchActive = _ref4$refetchActive === void 0 ? true : _ref4$refetchActive,\n        _ref4$refetchInactive = _ref4.refetchInactive,\n        refetchInactive = _ref4$refetchInactive === void 0 ? false : _ref4$refetchInactive,\n        exact = _ref4.exact,\n        throwOnError = _ref4.throwOnError;\n\n    return _catch$2(function () {\n      return _await$1(Promise.all(queryCache.getQueries(predicate, {\n        exact: exact\n      }).map(function (query) {\n        if (query.instances.length) {\n          if (refetchActive && query.instances.some(function (instance) {\n            return instance.config.enabled;\n          })) {\n            return query.fetch();\n          }\n        } else {\n          if (refetchInactive) {\n            return query.fetch();\n          }\n        }\n\n        return query.invalidate();\n      })));\n    }, function (err) {\n      if (throwOnError) {\n        throw err;\n      }\n    });\n  });\n\n  queryCache.resetErrorBoundaries = function () {\n    queryCache.getQueries(true).forEach(function (query) {\n      query.state.throwInErrorBoundary = false;\n    });\n  };\n\n  queryCache.buildQuery = function (userQueryKey, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    config = _extends({}, configRef.current.shared, configRef.current.queries, config);\n\n    var _config$queryKeySeria = config.queryKeySerializerFn(userQueryKey),\n        queryHash = _config$queryKeySeria[0],\n        queryKey = _config$queryKeySeria[1];\n\n    var query = queryCache.queries[queryHash];\n\n    if (query) {\n      Object.assign(query, {\n        config: config\n      });\n    } else {\n      query = makeQuery({\n        queryCache: queryCache,\n        queryKey: queryKey,\n        queryHash: queryHash,\n        config: config,\n        notifyGlobalListeners: notifyGlobalListeners\n      });\n\n      if (config.infinite) {\n        if (typeof query.state.canFetchMore === 'undefined' && typeof query.state.data !== 'undefined') {\n          query.state.canFetchMore = config.getFetchMore(query.state.data[query.state.data.length - 1], query.state.data);\n        } // Here we seed the pageVariabes for the query\n\n\n        if (!query.pageVariables) {\n          query.pageVariables = [[].concat(query.queryKey)];\n        }\n      } // If the query started with data, schedule\n      // a stale timeout\n\n\n      if (!isServer && query.state.data) {\n        query.scheduleStaleTimeout(); // Simulate a query healing process\n\n        query.heal(); // Schedule for garbage collection in case\n        // nothing subscribes to this query\n\n        query.scheduleGarbageCollection();\n      }\n\n      if (!frozen) {\n        queryCache.queries[queryHash] = query;\n\n        if (isServer) {\n          notifyGlobalListeners();\n        } else {\n          // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n          setTimeout(function () {\n            notifyGlobalListeners();\n          });\n        }\n      }\n    }\n\n    query.fallbackInstance = {\n      config: {\n        onSuccess: query.config.onSuccess,\n        onError: query.config.onError,\n        onSettled: query.config.onSettled\n      }\n    };\n    return query;\n  };\n\n  queryCache.prefetchQuery = _async$2(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (isObject(args[1]) && (args[1].hasOwnProperty('throwOnError') || args[1].hasOwnProperty('force'))) {\n      args[3] = args[1];\n      args[1] = undefined;\n      args[2] = undefined;\n    }\n\n    var _getQueryArgs = getQueryArgs(args),\n        queryKey = _getQueryArgs[0],\n        config = _getQueryArgs[1],\n        _getQueryArgs$ = _getQueryArgs[2];\n\n    _getQueryArgs$ = _getQueryArgs$ === void 0 ? {} : _getQueryArgs$;\n    var force = _getQueryArgs$.force,\n        throwOnError = _getQueryArgs$.throwOnError;\n    return _catch$2(function () {\n      var query = queryCache.buildQuery(queryKey, config);\n      return _invoke$2(function () {\n        if (force || query.state.isStale) {\n          return _awaitIgnored$2(query.fetch());\n        }\n      }, function () {\n        return query.state.data;\n      });\n    }, function (err) {\n      if (throwOnError) {\n        throw err;\n      }\n\n      Console.error(err);\n    });\n  });\n\n  queryCache.setQueryData = function (queryKey, updater, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var query = queryCache.getQuery(queryKey);\n\n    if (!query) {\n      query = queryCache.buildQuery(queryKey, config);\n    }\n\n    query.setData(updater);\n  };\n\n  return queryCache;\n}\n\nvar visibilityChangeEvent = 'visibilitychange';\nvar focusEvent = 'focus';\n\nvar onWindowFocus = function onWindowFocus() {\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(function (queryCache) {\n      return queryCache.invalidateQueries(function (query) {\n        if (!query.instances.length) {\n          return false;\n        }\n\n        if (!query.instances.some(function (instance) {\n          return instance.config.enabled;\n        })) {\n          return false;\n        }\n\n        if (!query.state.isStale) {\n          return false;\n        }\n\n        if (query.shouldContinueRetryOnFocus) {\n          // delete promise, so refetching will create new one\n          delete query.promise;\n        }\n\n        return query.config.refetchOnWindowFocus;\n      }).catch(Console.error);\n    });\n  }\n};\n\nvar removePreviousHandler;\n\nfunction setFocusHandler(callback) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler();\n  } // Sub the new watcher\n\n\n  removePreviousHandler = callback(onWindowFocus);\n}\n\nsetFocusHandler(function (handleFocus) {\n  var _window; // Listen to visibillitychange and focus\n\n\n  if (!isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false);\n    window.addEventListener(focusEvent, handleFocus, false);\n    return function () {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus);\n      window.removeEventListener(focusEvent, handleFocus);\n    };\n  }\n});\nvar queryCacheContext = React.createContext(queryCache);\n\nvar useQueryCache = function useQueryCache() {\n  return React.useContext(queryCacheContext);\n};\n\nfunction ReactQueryCacheProvider(_ref) {\n  var queryCache = _ref.queryCache,\n      children = _ref.children;\n  var resolvedQueryCache = React.useMemo(function () {\n    return queryCache || makeQueryCache();\n  }, [queryCache]);\n  React.useEffect(function () {\n    return function () {\n      if (queryCache == null) {\n        resolvedQueryCache.clear({\n          notify: false\n        });\n      }\n    };\n  }, [resolvedQueryCache, queryCache]);\n  return /*#__PURE__*/React.createElement(queryCacheContext.Provider, {\n    value: resolvedQueryCache\n  }, children);\n}\n\nvar configContext = React.createContext();\n\nfunction useConfigContext() {\n  return React.useContext(configContext) || defaultConfigRef.current;\n}\n\nfunction ReactQueryConfigProvider(_ref) {\n  var config = _ref.config,\n      children = _ref.children;\n  var configContextValue = useConfigContext();\n  var newConfig = React.useMemo(function () {\n    var _config$shared = config.shared,\n        shared = _config$shared === void 0 ? {} : _config$shared,\n        _config$queries = config.queries,\n        queries = _config$queries === void 0 ? {} : _config$queries,\n        _config$mutations = config.mutations,\n        mutations = _config$mutations === void 0 ? {} : _config$mutations;\n    var _configContextValue$s = configContextValue.shared,\n        contextShared = _configContextValue$s === void 0 ? {} : _configContextValue$s,\n        _configContextValue$q = configContextValue.queries,\n        contextQueries = _configContextValue$q === void 0 ? {} : _configContextValue$q,\n        _configContextValue$m = configContextValue.mutations,\n        contextMutations = _configContextValue$m === void 0 ? {} : _configContextValue$m;\n    return {\n      shared: _extends({}, contextShared, shared),\n      queries: _extends({}, contextQueries, queries),\n      mutations: _extends({}, contextMutations, mutations)\n    };\n  }, [config, configContextValue]);\n  React.useEffect(function () {\n    // restore previous config on unmount\n    return function () {\n      defaultConfigRef.current = _extends({}, configContextValue || DEFAULT_CONFIG);\n    };\n  }, [configContextValue]);\n\n  if (!configContextValue) {\n    defaultConfigRef.current = newConfig;\n  }\n\n  return /*#__PURE__*/React.createElement(configContext.Provider, {\n    value: newConfig\n  }, children);\n}\n\nfunction useGetLatest(obj) {\n  var ref = React.useRef();\n  ref.current = obj;\n  return React.useCallback(function () {\n    return ref.current;\n  }, []);\n}\n\nfunction useQueryArgs(args) {\n  var configContext = useConfigContext();\n\n  var _getQueryArgs = getQueryArgs(args),\n      queryKey = _getQueryArgs[0],\n      config = _getQueryArgs[1],\n      rest = _getQueryArgs.slice(2); // Build the final config\n\n\n  config = _extends({}, configContext.shared, configContext.queries, config);\n  return [queryKey, config].concat(rest);\n}\n\nfunction useMountedCallback(callback) {\n  var mounted = React.useRef(false);\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](function () {\n    mounted.current = true;\n    return function () {\n      return mounted.current = false;\n    };\n  }, []);\n  return React.useCallback(function () {\n    return mounted.current ? callback.apply(void 0, arguments) : void 0;\n  }, [callback]);\n}\n\nfunction handleSuspense(queryInfo) {\n  if (queryInfo.query.config.suspense || queryInfo.query.config.useErrorBoundary) {\n    if (queryInfo.query.state.status === statusError && queryInfo.query.state.throwInErrorBoundary) {\n      throw queryInfo.error;\n    }\n\n    if (queryInfo.query.config.suspense && queryInfo.status !== statusSuccess && queryInfo.query.config.enabled) {\n      queryInfo.query.wasSuspended = true;\n      throw queryInfo.query.fetch();\n    }\n  }\n}\n\nfunction useIsFetching() {\n  var queryCache = useQueryCache();\n\n  var _React$useReducer = React.useReducer(function (d) {\n    return d + 1;\n  }, 1),\n      state = _React$useReducer[0],\n      unsafeRerender = _React$useReducer[1];\n\n  var rerender = useMountedCallback(unsafeRerender);\n  var isFetching = React.useMemo(function () {\n    return state && queryCache.isFetching;\n  }, [queryCache.isFetching, state]);\n  var getIsFetching = useGetLatest(isFetching);\n  React.useEffect(function () {\n    return queryCache.subscribe(function (newCache) {\n      if (getIsFetching() !== newCache.isFetching) rerender();\n    });\n  }, [getIsFetching, queryCache, rerender]);\n  return isFetching;\n}\n\nfunction _await$2(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nvar getDefaultState = function getDefaultState() {\n  return {\n    status: statusIdle,\n    data: undefined,\n    error: null\n  };\n};\n\nfunction _catch$3(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nvar actionReset = {};\n\nfunction _async$3(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nvar actionLoading = {};\nvar actionResolve = {};\nvar actionReject = {};\n\nfunction mutationReducer(state, action) {\n  if (action.type === actionReset) {\n    return getDefaultState();\n  }\n\n  if (action.type === actionLoading) {\n    return {\n      status: statusLoading\n    };\n  }\n\n  if (action.type === actionResolve) {\n    return {\n      status: statusSuccess,\n      data: action.data\n    };\n  }\n\n  if (action.type === actionReject) {\n    return {\n      status: statusError,\n      error: action.error\n    };\n  }\n\n  throw new Error();\n}\n\nfunction useMutation(mutationFn, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var _React$useReducer = React.useReducer(mutationReducer, null, getDefaultState),\n      state = _React$useReducer[0],\n      unsafeDispatch = _React$useReducer[1];\n\n  var dispatch = useMountedCallback(unsafeDispatch);\n  var getMutationFn = useGetLatest(mutationFn);\n  var getConfig = useGetLatest(_extends({}, useConfigContext().shared, useConfigContext().mutations, config));\n  var latestMutationRef = React.useRef();\n  var mutate = React.useCallback(_async$3(function (variables, _temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$onSuccess = _ref.onSuccess,\n        onSuccess = _ref$onSuccess === void 0 ? noop : _ref$onSuccess,\n        _ref$onError = _ref.onError,\n        onError = _ref$onError === void 0 ? noop : _ref$onError,\n        _ref$onSettled = _ref.onSettled,\n        onSettled = _ref$onSettled === void 0 ? noop : _ref$onSettled,\n        throwOnError = _ref.throwOnError;\n\n    var config = getConfig();\n    var mutationId = uid();\n    latestMutationRef.current = mutationId;\n\n    var isLatest = function isLatest() {\n      return latestMutationRef.current === mutationId;\n    };\n\n    var snapshotValue;\n    return _catch$3(function () {\n      dispatch({\n        type: actionLoading\n      });\n      return _await$2(config.onMutate(variables), function (_config$onMutate) {\n        snapshotValue = _config$onMutate;\n        return _await$2(getMutationFn()(variables), function (data) {\n          if (isLatest()) {\n            dispatch({\n              type: actionResolve,\n              data: data\n            });\n          }\n\n          return _await$2(config.onSuccess(data, variables), function () {\n            return _await$2(onSuccess(data, variables), function () {\n              return _await$2(config.onSettled(data, null, variables), function () {\n                return _await$2(onSettled(data, null, variables), function () {\n                  return data;\n                });\n              });\n            });\n          });\n        });\n      });\n    }, function (error) {\n      Console.error(error);\n      return _await$2(config.onError(error, variables, snapshotValue), function () {\n        return _await$2(onError(error, variables, snapshotValue), function () {\n          return _await$2(config.onSettled(undefined, error, variables, snapshotValue), function () {\n            return _await$2(onSettled(undefined, error, variables, snapshotValue), function () {\n              if (isLatest()) {\n                dispatch({\n                  type: actionReject,\n                  error: error\n                });\n              }\n\n              if (throwOnError != null ? throwOnError : config.throwOnError) {\n                throw error;\n              }\n            });\n          });\n        });\n      });\n    });\n  }), [dispatch, getConfig, getMutationFn]);\n  var reset = React.useCallback(function () {\n    return dispatch({\n      type: actionReset\n    });\n  }, [dispatch]);\n  React.useEffect(function () {\n    var _getConfig = getConfig(),\n        suspense = _getConfig.suspense,\n        useErrorBoundary = _getConfig.useErrorBoundary;\n\n    if ((useErrorBoundary != null ? useErrorBoundary : suspense) && state.error) {\n      throw state.error;\n    }\n  }, [getConfig, state.error]);\n  return [mutate, _extends({}, state, {\n    reset: reset,\n    isIdle: state.status === statusIdle,\n    isLoading: state.status === statusLoading,\n    isSuccess: state.status === statusSuccess,\n    isError: state.status === statusError\n  })];\n}\n\nfunction useBaseQuery(queryKey, config) {\n  if (config === void 0) {\n    config = {};\n  } // Make a rerender function\n\n\n  var rerender = useMountedCallback(React.useState()[1]); // Get the query cache\n\n  var queryCache = useQueryCache(); // Build the query for use\n\n  var query = queryCache.buildQuery(queryKey, config); // Create a query instance ref\n\n  var instanceRef = React.useRef(); // Subscribe to the query when the subscribe function changes\n\n  React.useEffect(function () {\n    instanceRef.current = query.subscribe(function () {\n      return rerender({});\n    }); // Unsubscribe when things change\n\n    return instanceRef.current.unsubscribe;\n  }, [query, rerender]); // Always update the config\n\n  React.useEffect(function () {\n    instanceRef.current.updateConfig(config);\n  });\n  var enabledBool = Boolean(config.enabled); // Run the instance when the query or enabled change\n\n  React.useEffect(function () {\n    instanceRef.current.run();\n  }, [enabledBool, query]);\n  return _extends({}, query, query.state, {\n    query: query\n  });\n}\n\nfunction useQuery() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var query = useBaseQuery.apply(void 0, useQueryArgs(args));\n  handleSuspense(query);\n  return query;\n} // as the query key changes, we keep the results from the\n// last query and use them as placeholder data in the next one\n// We DON'T use it as initial data though. That's important\n\n\nfunction usePaginatedQuery() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var _useQueryArgs = useQueryArgs(args),\n      queryKey = _useQueryArgs[0],\n      _useQueryArgs$ = _useQueryArgs[1],\n      config = _useQueryArgs$ === void 0 ? {} : _useQueryArgs$; // Keep track of the latest data result\n\n\n  var lastDataRef = React.useRef(); // If latestData is there, don't use initialData\n\n  if (typeof lastDataRef.current !== 'undefined') {\n    delete config.initialData;\n  } // Make the query as normal\n\n\n  var queryInfo = useBaseQuery(queryKey, config); // If the query is disabled, get rid of the latest data\n\n  if (!queryInfo.query.config.enabled) {\n    lastDataRef.current = undefined;\n  } // Get the real data and status from the query\n\n\n  var latestData = queryInfo.data,\n      status = queryInfo.status; // If the real query succeeds, and there is data in it,\n  // update the latest data\n\n  React.useEffect(function () {\n    if (status === 'success' && typeof latestData !== 'undefined') {\n      lastDataRef.current = latestData;\n    }\n  }, [latestData, status]); // Resolved data should be either the real data we're waiting on\n  // or the latest placeholder data\n\n  var resolvedData = latestData;\n\n  if (typeof resolvedData === 'undefined') {\n    resolvedData = lastDataRef.current;\n  } // If we have any data at all from either, we\n  // need to make sure the status is success, even though\n  // the real query may still be loading\n\n\n  if (typeof resolvedData !== 'undefined') {\n    var overrides = _extends({\n      status: 'success'\n    }, getStatusBools('success'));\n\n    Object.assign(queryInfo.query.state, overrides);\n    Object.assign(queryInfo, overrides);\n  }\n\n  var paginatedQueryInfo = _extends({}, queryInfo, {\n    resolvedData: resolvedData,\n    latestData: latestData\n  });\n\n  handleSuspense(paginatedQueryInfo);\n  return paginatedQueryInfo;\n} //\n\n\nfunction useInfiniteQuery() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var _useQueryArgs = useQueryArgs(args),\n      queryKey = _useQueryArgs[0],\n      config = _useQueryArgs[1];\n\n  config.infinite = true;\n  var queryInfo = useBaseQuery(queryKey, config);\n  handleSuspense(queryInfo);\n  return queryInfo;\n}\n\nexport { ReactQueryCacheProvider, ReactQueryConfigProvider, deepIncludes, makeQueryCache, queryCache, queryCaches, setConsole, setFocusHandler, stableStringify, statusError, statusIdle, statusLoading, statusSuccess, useInfiniteQuery, useIsFetching, useMutation, usePaginatedQuery, useQuery, useQueryCache };","map":{"version":3,"sources":["../src/core/utils.js","../src/core/config.js","../src/core/queryInstance.js","../src/core/query.js","../src/core/queryCache.js","../src/core/setFocusHandler.js","../src/react/ReactQueryCacheProvider.js","../src/react/ReactQueryConfigProvider.js","../src/react/utils.js","../src/react/useIsFetching.js","../src/react/useMutation.js","../src/react/useBaseQuery.js","../src/react/useQuery.js","../src/react/usePaginatedQuery.js","../src/react/useInfiniteQuery.js"],"names":["statusIdle","statusLoading","statusError","statusSuccess","_uid","uid","cancelledError","isServer","Console","console","error","warn","log","noop","updater","Object","value","JSON","a","Array","deepIncludes","b","document","navigator","isObject","args","queryKey","queryFn","config","rest","length","i","deepEqual","keys","key","isLoading","status","isSuccess","isError","isIdle","DEFAULT_CONFIG","shared","suspense","queries","queryKeySerializerFn","initialStale","enabled","retry","retryDelay","Math","staleTime","cacheTime","refetchOnWindowFocus","refetchInterval","queryFnParamsFilter","refetchOnMount","isDataEqual","onError","onSuccess","onSettled","useErrorBoundary","mutations","throwOnError","onMutate","defaultConfigRef","current","queryHash","stableStringify","instance","id","onStateUpdate","clearInterval","oldConfig","query","minInterval","d","setInterval","isDocumentVisible","arguments","Promise","f","result","body","then","recover","state","callback","actionInit","actionFailed","actionMarkStale","actionMarkGC","actionFetch","actionSuccess","actionError","_this","actionSetState","onFulfilled","queryCache","onRejected","notifyGlobalListeners","initialData","hasInitialData","isStale","pact","initialStatus","instances","queryReducer","type","observer","thenable","clearTimeout","staleTimeout","setTimeout","makeQueryInstance","tryFetchData","promise","fn","delay","functionalUpdate","reject","resolve","fetchMore","originalQueryFn","data","pageVariables","rebuiltPageVariables","nextCursor","pageArgs","fetchMoreInfo","previous","isFetchingMore","newArgs","getCallbackInstances","callbackInstances","awaitBody","shouldContinue","test","cancelled","newState","switchActions","getStatusBools","action","isFetching","failureCount","markedForGarbageCollection","updatedAt","Date","throwInErrorBoundary","finalizer","makeQueryCache","queryCaches","frozen","defaultConfig","globalListeners","configRef","acc","notify","exact","predicate","refetchActive","refetchInactive","makeQuery","force","getQueryArgs","visibilityChangeEvent","focusEvent","onWindowFocus","isOnline","removePreviousHandler","setFocusHandler","window","queryCacheContext","React","useQueryCache","children","resolvedQueryCache","configContext","configContextValue","useConfigContext","newConfig","contextShared","contextQueries","contextMutations","ref","mounted","queryInfo","unsafeRerender","rerender","useMountedCallback","getIsFetching","useGetLatest","newCache","getDefaultState","actionReset","actionLoading","actionResolve","actionReject","unsafeDispatch","dispatch","getMutationFn","getConfig","latestMutationRef","mutate","mutationId","isLatest","snapshotValue","reset","instanceRef","enabledBool","Boolean","useBaseQuery","useQueryArgs","handleSuspense","lastDataRef","latestData","resolvedData","overrides","paginatedQueryInfo"],"mappings":"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","sourcesContent":["export const statusIdle = 'idle'\nexport const statusLoading = 'loading'\nexport const statusError = 'error'\nexport const statusSuccess = 'success'\n\nlet _uid = 0\nexport const uid = () => _uid++\nexport const cancelledError = {}\nexport let globalStateListeners = []\nexport const isServer = typeof window === 'undefined'\nexport function noop() {\n  return void 0\n}\nexport function identity(d) {\n  return d\n}\nexport let Console = console || { error: noop, warn: noop, log: noop }\n\nexport function setConsole(c) {\n  Console = c\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function stableStringifyReplacer(_, value) {\n  return isObject(value)\n    ? Object.assign(\n        {},\n        ...Object.keys(value)\n          .sort()\n          .map(key => ({\n            [key]: value[key],\n          }))\n      )\n    : value\n}\n\nexport function stableStringify(obj) {\n  return JSON.stringify(obj, stableStringifyReplacer)\n}\n\nexport function isObject(a) {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\nexport function deepIncludes(a, b) {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isDocumentVisible() {\n  return (\n    typeof document === 'undefined' ||\n    document.visibilityState === undefined ||\n    document.visibilityState === 'visible' ||\n    document.visibilityState === 'prerender'\n  )\n}\n\nexport function isOnline() {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs(args) {\n  if (isObject(args[0])) {\n    const { queryKey, queryFn, config } = args[0]\n    args = [queryKey, queryFn, config, ...args.slice(1)]\n  } else if (isObject(args[1])) {\n    const [queryKey, config, ...rest] = args\n    args = [queryKey, undefined, config, ...rest]\n  }\n\n  let [queryKey, queryFn, config = {}, ...rest] = args\n\n  queryFn = queryFn || config.queryFn\n\n  return [queryKey, queryFn ? { ...config, queryFn } : config, ...rest]\n}\n\n// This deep-equal is directly based on https://github.com/epoberezkin/fast-deep-equal.\n// The parts for comparing any non-JSON-supported values has been removed\nexport function deepEqual(a, b) {\n  if (a === b) return true\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var length, i, keys\n    if (Array.isArray(a)) {\n      length = a.length\n      // eslint-disable-next-line eqeqeq\n      if (length != b.length) return false\n      for (i = length; i-- !== 0; ) if (!deepEqual(a[i], b[i])) return false\n      return true\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf()\n\n    keys = Object.keys(a)\n    length = keys.length\n    if (length !== Object.keys(b).length) return false\n\n    for (i = length; i-- !== 0; )\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false\n\n    for (i = length; i-- !== 0; ) {\n      var key = keys[i]\n\n      if (!deepEqual(a[key], b[key])) return false\n    }\n\n    return true\n  }\n\n  // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n  return a !== a && b !== b\n}\n\nexport function getStatusBools(status) {\n  return {\n    isLoading: status === statusLoading,\n    isSuccess: status === statusSuccess,\n    isError: status === statusError,\n    isIdle: status === statusIdle,\n  }\n}\n","import { noop, stableStringify, identity, deepEqual } from './utils'\n\nexport const DEFAULT_CONFIG = {\n  shared: {\n    suspense: false,\n  },\n  queries: {\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    queryFn: undefined,\n    initialStale: undefined,\n    enabled: true,\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: 0,\n    cacheTime: 5 * 60 * 1000,\n    refetchOnWindowFocus: true,\n    refetchInterval: false,\n    queryFnParamsFilter: identity,\n    refetchOnMount: true,\n    isDataEqual: deepEqual,\n    onError: noop,\n    onSuccess: noop,\n    onSettled: noop,\n    useErrorBoundary: false,\n  },\n  mutations: {\n    throwOnError: false,\n    onMutate: noop,\n    onError: noop,\n    onSuccess: noop,\n    onSettled: noop,\n    useErrorBoundary: false,\n  },\n}\n\nexport const defaultConfigRef = {\n  current: DEFAULT_CONFIG,\n}\n\nexport function defaultQueryKeySerializerFn(queryKey) {\n  if (!queryKey) {\n    return []\n  }\n\n  if (!Array.isArray(queryKey)) {\n    queryKey = [queryKey]\n  }\n\n  if (queryKey.some(d => typeof d === 'function')) {\n    throw new Error('A valid query key is required!')\n  }\n\n  const queryHash = stableStringify(queryKey)\n  queryKey = JSON.parse(queryHash)\n\n  if (!queryHash) {\n    return []\n  }\n\n  return [queryHash, queryKey]\n}\n","import { uid, isServer, isDocumentVisible, Console } from './utils'\n\nexport function makeQueryInstance(query, onStateUpdate) {\n  const instance = {\n    id: uid(),\n    onStateUpdate,\n  }\n\n  instance.clearInterval = () => {\n    clearInterval(instance.refetchIntervalId)\n    delete instance.refetchIntervalId\n  }\n\n  instance.updateConfig = config => {\n    const oldConfig = instance.config\n\n    // Update the config\n    instance.config = config\n\n    if (!isServer) {\n      if (oldConfig?.refetchInterval === config.refetchInterval) {\n        return\n      }\n\n      query.clearIntervals()\n\n      const minInterval = Math.min(\n        ...query.instances.map(d => d.config.refetchInterval || Infinity)\n      )\n\n      if (\n        !instance.refetchIntervalId &&\n        minInterval > 0 &&\n        minInterval < Infinity\n      ) {\n        instance.refetchIntervalId = setInterval(() => {\n          if (\n            query.instances.some(instance => instance.config.enabled) &&\n            (isDocumentVisible() ||\n              query.instances.some(\n                instance => instance.config.refetchIntervalInBackground\n              ))\n          ) {\n            query.fetch()\n          }\n        }, minInterval)\n      }\n    }\n  }\n\n  instance.run = async () => {\n    try {\n      // Perform the refetch for this query if necessary\n      if (\n        query.config.enabled && // Don't auto refetch if disabled\n        !query.wasSuspended && // Don't double refetch for suspense\n        query.state.isStale && // Only refetch if stale\n        (query.config.refetchOnMount || query.instances.length === 1)\n      ) {\n        await query.fetch()\n      }\n\n      query.wasSuspended = false\n    } catch (error) {\n      Console.error(error)\n    }\n  }\n\n  instance.unsubscribe = () => {\n    query.instances = query.instances.filter(d => d.id !== instance.id)\n\n    if (!query.instances.length) {\n      instance.clearInterval()\n      query.cancel()\n\n      if (!isServer) {\n        // Schedule garbage collection\n        query.scheduleGarbageCollection()\n      }\n    }\n  }\n\n  return instance\n}\n","import {\n  isServer,\n  functionalUpdate,\n  cancelledError,\n  isDocumentVisible,\n  statusLoading,\n  statusSuccess,\n  statusError,\n  noop,\n  statusIdle,\n  Console,\n  getStatusBools,\n} from './utils'\nimport { makeQueryInstance } from './queryInstance'\n\nconst actionInit = 'Init'\nconst actionFailed = 'Failed'\nconst actionMarkStale = 'MarkStale'\nconst actionMarkGC = 'MarkGC'\nconst actionFetch = 'Fetch'\nconst actionSuccess = 'Success'\nconst actionError = 'Error'\nconst actionSetState = 'SetState'\n\nexport function makeQuery({\n  queryCache,\n  queryKey,\n  queryHash,\n  config,\n  notifyGlobalListeners,\n}) {\n  const initialData =\n    typeof config.initialData === 'function'\n      ? config.initialData()\n      : config.initialData\n\n  const hasInitialData = typeof initialData !== 'undefined'\n\n  const isStale =\n    !config.enabled ||\n    (typeof config.initialStale === 'function'\n      ? config.initialStale()\n      : config.initialStale ?? !hasInitialData)\n\n  const initialStatus = hasInitialData\n    ? statusSuccess\n    : config.enabled\n    ? statusLoading\n    : statusIdle\n\n  let query = {\n    queryKey,\n    queryHash,\n    config,\n    instances: [],\n    state: queryReducer(undefined, {\n      type: actionInit,\n      initialStatus,\n      initialData,\n      hasInitialData,\n      isStale,\n    }),\n  }\n\n  query.dispatch = action => {\n    query.state = queryReducer(query.state, action)\n    query.instances.forEach(d => d.onStateUpdate(query.state))\n    notifyGlobalListeners()\n  }\n\n  query.scheduleStaleTimeout = () => {\n    if (isServer) return\n    clearTimeout(query.staleTimeout)\n\n    if (query.config.staleTime === Infinity) {\n      return\n    }\n\n    query.staleTimeout = setTimeout(() => {\n      if (queryCache.getQuery(query.queryKey)) {\n        query.invalidate()\n      }\n    }, query.config.staleTime)\n  }\n\n  query.invalidate = () => {\n    clearTimeout(query.staleTimeout)\n    query.dispatch({ type: actionMarkStale })\n  }\n\n  query.scheduleGarbageCollection = () => {\n    if (!queryCache.queries[query.queryHash]) return\n    if (query.config.cacheTime === Infinity) {\n      return\n    }\n    query.dispatch({ type: actionMarkGC })\n    query.cacheTimeout = setTimeout(\n      () => {\n        queryCache.removeQueries(\n          d =>\n            d.state.markedForGarbageCollection &&\n            d.queryHash === query.queryHash\n        )\n      },\n      typeof query.state.data === 'undefined' && query.state.status !== 'error'\n        ? 0\n        : query.config.cacheTime\n    )\n  }\n\n  query.refetch = async () => {\n    try {\n      await query.fetch()\n    } catch (error) {\n      Console.error(error)\n    }\n  }\n\n  query.heal = () => {\n    // Stop the query from being garbage collected\n    clearTimeout(query.cacheTimeout)\n\n    // Mark the query as not cancelled\n    query.cancelled = null\n  }\n\n  query.cancel = () => {\n    query.cancelled = cancelledError\n\n    if (query.cancelPromises) {\n      query.cancelPromises()\n    }\n\n    delete query.promise\n  }\n\n  query.clearIntervals = () => {\n    query.instances.forEach(instance => {\n      instance.clearInterval()\n    })\n  }\n\n  query.setState = updater => query.dispatch({ type: actionSetState, updater })\n\n  query.setData = updater => {\n    // Set data and mark it as cached\n    query.dispatch({ type: actionSuccess, updater })\n\n    // Schedule a fresh invalidation!\n    query.scheduleStaleTimeout()\n  }\n\n  query.clear = () => {\n    clearTimeout(query.staleTimeout)\n    clearTimeout(query.cacheTimeout)\n    clearTimeout(query.retryTimeout)\n    query.clearIntervals()\n    query.cancel()\n    query.dispatch = noop\n    delete queryCache.queries[query.queryHash]\n    notifyGlobalListeners()\n  }\n\n  query.subscribe = (onStateUpdate = noop) => {\n    const instance = makeQueryInstance(query, onStateUpdate)\n    query.instances.push(instance)\n    query.heal()\n    return instance\n  }\n\n  // Set up the core fetcher function\n  const tryFetchData = async (fn, ...args) => {\n    try {\n      // Perform the query\n      const promise = fn(...query.config.queryFnParamsFilter(args))\n\n      query.cancelPromises = () => promise.cancel?.()\n\n      const data = await promise\n      delete query.shouldContinueRetryOnFocus\n\n      delete query.cancelPromises\n      if (query.cancelled) throw query.cancelled\n\n      return data\n    } catch (error) {\n      delete query.cancelPromises\n      if (query.cancelled) throw query.cancelled\n\n      // If we fail, increase the failureCount\n      query.dispatch({ type: actionFailed })\n\n      // Do we need to retry the request?\n      if (\n        query.config.retry === true ||\n        query.state.failureCount <= query.config.retry ||\n        (typeof query.config.retry === 'function' &&\n          query.config.retry(query.state.failureCount, error))\n      ) {\n        // Only retry if the document is visible\n        if (!isDocumentVisible()) {\n          // set this flag to continue retries on focus\n          query.shouldContinueRetryOnFocus = true\n          // Resolve a\n          return new Promise(noop)\n        }\n\n        delete query.shouldContinueRetryOnFocus\n\n        // Determine the retryDelay\n        const delay = functionalUpdate(\n          query.config.retryDelay,\n          query.state.failureCount\n        )\n\n        // Return a new promise with the retry\n        return await new Promise((resolve, reject) => {\n          // Keep track of the retry timeout\n          query.retryTimeout = setTimeout(async () => {\n            if (query.cancelled) return reject(query.cancelled)\n\n            try {\n              const data = await tryFetchData(fn, ...args)\n              if (query.cancelled) return reject(query.cancelled)\n              resolve(data)\n            } catch (error) {\n              if (query.cancelled) return reject(query.cancelled)\n              reject(error)\n            }\n          }, delay)\n        })\n      }\n\n      throw error\n    }\n  }\n\n  query.fetch = async ({ fetchMore } = {}) => {\n    let queryFn = query.config.queryFn\n\n    if (!queryFn) {\n      return\n    }\n\n    if (query.config.infinite) {\n      const originalQueryFn = queryFn\n\n      queryFn = async () => {\n        const data = []\n        const pageVariables = [...query.pageVariables]\n        const rebuiltPageVariables = []\n\n        do {\n          const args = pageVariables.shift()\n\n          if (!data.length) {\n            // the first page query doesn't need to be rebuilt\n            data.push(await originalQueryFn(...args))\n            rebuiltPageVariables.push(args)\n          } else {\n            // get an up-to-date cursor based on the previous data set\n\n            const nextCursor = query.config.getFetchMore(\n              data[data.length - 1],\n              data\n            )\n\n            // break early if there's no next cursor\n            // otherwise we'll start from the beginning\n            // which will cause unwanted duplication\n            if (!nextCursor) {\n              break\n            }\n\n            const pageArgs = [\n              // remove the last argument (the previously saved cursor)\n              ...args.slice(0, -1),\n              nextCursor,\n            ]\n\n            data.push(await originalQueryFn(...pageArgs))\n            rebuiltPageVariables.push(pageArgs)\n          }\n        } while (pageVariables.length)\n\n        query.state.canFetchMore = query.config.getFetchMore(\n          data[data.length - 1],\n          data\n        )\n        query.pageVariables = rebuiltPageVariables\n\n        return data\n      }\n\n      if (fetchMore) {\n        queryFn = async (...args) => {\n          const { fetchMoreInfo, previous } = fetchMore\n          try {\n            query.setState(old => ({\n              ...old,\n              isFetchingMore: previous ? 'previous' : 'next',\n            }))\n\n            const newArgs = [...args, fetchMoreInfo]\n\n            query.pageVariables[previous ? 'unshift' : 'push'](newArgs)\n\n            const newData = await originalQueryFn(...newArgs)\n\n            const data = previous\n              ? [newData, ...query.state.data]\n              : [...query.state.data, newData]\n\n            query.state.canFetchMore = query.config.getFetchMore(newData, data)\n\n            return data\n          } finally {\n            query.setState(old => ({\n              ...old,\n              isFetchingMore: false,\n            }))\n          }\n        }\n      }\n    }\n\n    // Create a new promise for the query cache if necessary\n    if (!query.promise) {\n      query.promise = (async () => {\n        // If there are any retries pending for this query, kill them\n        query.cancelled = null\n\n        const getCallbackInstances = () => {\n          const callbackInstances = [...query.instances]\n\n          if (query.wasSuspended) {\n            callbackInstances.unshift(query.fallbackInstance)\n          }\n          return callbackInstances\n        }\n\n        try {\n          // Set up the query refreshing state\n          query.dispatch({ type: actionFetch })\n\n          // Try to get the data\n          let data = await tryFetchData(queryFn, ...query.queryKey)\n\n          query.setData(old =>\n            query.config.isDataEqual(old, data) ? old : data\n          )\n\n          getCallbackInstances().forEach(\n            instance =>\n              instance.config.onSuccess &&\n              instance.config.onSuccess(query.state.data)\n          )\n\n          getCallbackInstances().forEach(\n            instance =>\n              instance.config.onSettled &&\n              instance.config.onSettled(query.state.data, null)\n          )\n\n          delete query.promise\n\n          return data\n        } catch (error) {\n          query.dispatch({\n            type: actionError,\n            cancelled: error === query.cancelled,\n            error,\n          })\n\n          delete query.promise\n\n          if (error !== query.cancelled) {\n            getCallbackInstances().forEach(\n              instance =>\n                instance.config.onError && instance.config.onError(error)\n            )\n\n            getCallbackInstances().forEach(\n              instance =>\n                instance.config.onSettled &&\n                instance.config.onSettled(undefined, error)\n            )\n\n            throw error\n          }\n        }\n      })()\n    }\n\n    return query.promise\n  }\n\n  if (query.config.infinite) {\n    query.fetchMore = (\n      fetchMoreInfo = query.state.canFetchMore,\n      { previous = false } = {}\n    ) => query.fetch({ fetchMore: { fetchMoreInfo, previous } })\n  }\n\n  return query\n}\n\nexport function queryReducer(state, action) {\n  const newState = switchActions(state, action)\n\n  return Object.assign(newState, getStatusBools(newState.status))\n}\n\nfunction switchActions(state, action) {\n  switch (action.type) {\n    case actionInit:\n      return {\n        status: action.initialStatus,\n        error: null,\n        isFetching: action.initialStatus === 'loading',\n        failureCount: 0,\n        isStale: action.isStale,\n        markedForGarbageCollection: false,\n        data: action.initialData,\n        updatedAt: action.hasInitialData ? Date.now() : 0,\n      }\n    case actionFailed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case actionMarkStale:\n      return {\n        ...state,\n        isStale: true,\n      }\n    case actionMarkGC: {\n      return {\n        ...state,\n        markedForGarbageCollection: true,\n      }\n    }\n    case actionFetch:\n      return {\n        ...state,\n        status:\n          typeof state.data !== 'undefined' ? statusSuccess : statusLoading,\n        isFetching: true,\n        failureCount: 0,\n      }\n    case actionSuccess:\n      return {\n        ...state,\n        status: statusSuccess,\n        data: functionalUpdate(action.updater, state.data),\n        error: null,\n        isStale: false,\n        isFetching: false,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case actionError:\n      return {\n        ...state,\n        isFetching: false,\n        isStale: true,\n        ...(!action.cancelled && {\n          status: statusError,\n          error: action.error,\n          throwInErrorBoundary: true,\n        }),\n      }\n    case actionSetState:\n      return functionalUpdate(action.updater, state)\n    default:\n      throw new Error()\n  }\n}\n","import {\n  isServer,\n  getQueryArgs,\n  deepIncludes,\n  Console,\n  isObject,\n} from './utils'\nimport { defaultConfigRef } from './config'\nimport { makeQuery } from './query'\n\nexport const queryCache = makeQueryCache()\n\nexport const queryCaches = [queryCache]\n\nexport function makeQueryCache({ frozen = isServer, defaultConfig } = {}) {\n  // A frozen cache does not add new queries to the cache\n  const globalListeners = []\n\n  const configRef = defaultConfig\n    ? { current: { ...defaultConfigRef.current, ...defaultConfig }}\n    : defaultConfigRef\n\n  const queryCache = {\n    queries: {},\n    isFetching: 0,\n  }\n\n  const notifyGlobalListeners = () => {\n    queryCache.isFetching = Object.values(queryCache.queries).reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n\n    globalListeners.forEach(d => d(queryCache))\n  }\n\n  queryCache.subscribe = cb => {\n    globalListeners.push(cb)\n    return () => {\n      globalListeners.splice(globalListeners.indexOf(cb), 1)\n    }\n  }\n\n  queryCache.clear = ({ notify = true } = {}) => {\n    Object.values(queryCache.queries).forEach(query => query.clear())\n    queryCache.queries = {}\n    if (notify) {\n      notifyGlobalListeners()\n    }\n  }\n\n  queryCache.getQueries = (predicate, { exact } = {}) => {\n    if (predicate === true) {\n      return Object.values(queryCache.queries)\n    }\n\n    if (typeof predicate !== 'function') {\n      const [\n        queryHash,\n        queryKey,\n      ] = configRef.current.queries.queryKeySerializerFn(predicate)\n\n      predicate = d =>\n        exact ? d.queryHash === queryHash : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return Object.values(queryCache.queries).filter(predicate)\n  }\n\n  queryCache.getQuery = queryKey =>\n    queryCache.getQueries(queryKey, { exact: true })[0]\n\n  queryCache.getQueryData = queryKey =>\n    queryCache.getQuery(queryKey)?.state.data\n\n  queryCache.removeQueries = (...args) => {\n    queryCache.getQueries(...args).forEach(query => query.clear())\n  }\n\n  queryCache.cancelQueries = (...args) => {\n    queryCache.getQueries(...args).forEach(query => query.cancel())\n  }\n\n  queryCache.invalidateQueries = async (\n    predicate,\n    { refetchActive = true, refetchInactive = false, exact, throwOnError } = {}\n  ) => {\n    try {\n      return await Promise.all(\n        queryCache.getQueries(predicate, { exact }).map(query => {\n          if (query.instances.length) {\n            if (\n              refetchActive &&\n              query.instances.some(instance => instance.config.enabled)\n            ) {\n              return query.fetch()\n            }\n          } else {\n            if (refetchInactive) {\n              return query.fetch()\n            }\n          }\n\n          return query.invalidate()\n        })\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  queryCache.resetErrorBoundaries = () => {\n    queryCache.getQueries(true).forEach(query => {\n      query.state.throwInErrorBoundary = false\n    })\n  }\n\n  queryCache.buildQuery = (userQueryKey, config = {}) => {\n    config = {\n      ...configRef.current.shared,\n      ...configRef.current.queries,\n      ...config,\n    }\n\n    let [queryHash, queryKey] = config.queryKeySerializerFn(userQueryKey)\n\n    let query = queryCache.queries[queryHash]\n\n    if (query) {\n      Object.assign(query, { config })\n    } else {\n      query = makeQuery({\n        queryCache,\n        queryKey,\n        queryHash,\n        config,\n        notifyGlobalListeners,\n      })\n\n      if (config.infinite) {\n        if (\n          typeof query.state.canFetchMore === 'undefined' &&\n          typeof query.state.data !== 'undefined'\n        ) {\n          query.state.canFetchMore = config.getFetchMore(\n            query.state.data[query.state.data.length - 1],\n            query.state.data\n          )\n        }\n\n        // Here we seed the pageVariabes for the query\n        if (!query.pageVariables) {\n          query.pageVariables = [[...query.queryKey]]\n        }\n      }\n\n      // If the query started with data, schedule\n      // a stale timeout\n      if (!isServer && query.state.data) {\n        query.scheduleStaleTimeout()\n\n        // Simulate a query healing process\n        query.heal()\n        // Schedule for garbage collection in case\n        // nothing subscribes to this query\n        query.scheduleGarbageCollection()\n      }\n\n      if (!frozen) {\n        queryCache.queries[queryHash] = query\n\n        if (isServer) {\n          notifyGlobalListeners()\n        } else {\n          // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n          setTimeout(() => {\n            notifyGlobalListeners()\n          })\n        }\n      }\n    }\n\n    query.fallbackInstance = {\n      config: {\n        onSuccess: query.config.onSuccess,\n        onError: query.config.onError,\n        onSettled: query.config.onSettled,\n      },\n    }\n\n    return query\n  }\n\n  queryCache.prefetchQuery = async (...args) => {\n    if (\n      isObject(args[1]) &&\n      (args[1].hasOwnProperty('throwOnError') ||\n        args[1].hasOwnProperty('force'))\n    ) {\n      args[3] = args[1]\n      args[1] = undefined\n      args[2] = undefined\n    }\n\n    let [queryKey, config, { force, throwOnError } = {}] = getQueryArgs(args)\n\n    try {\n      const query = queryCache.buildQuery(queryKey, config)\n      if (force || query.state.isStale) {\n        await query.fetch()\n      }\n      return query.state.data\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n      Console.error(err)\n    }\n  }\n\n  queryCache.setQueryData = (queryKey, updater, config = {}) => {\n    let query = queryCache.getQuery(queryKey)\n\n    if (!query) {\n      query = queryCache.buildQuery(queryKey, config)\n    }\n\n    query.setData(updater)\n  }\n\n  return queryCache\n}\n","import { isOnline, isDocumentVisible, Console, isServer } from './utils'\nimport { queryCaches } from './queryCache'\n\nconst visibilityChangeEvent = 'visibilitychange'\nconst focusEvent = 'focus'\n\nconst onWindowFocus = () => {\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(queryCache =>\n      queryCache\n        .invalidateQueries(query => {\n          if (!query.instances.length) {\n            return false\n          }\n\n          if (!query.instances.some(instance => instance.config.enabled)) {\n            return false\n          }\n\n          if (!query.state.isStale) {\n            return false\n          }\n\n          if (query.shouldContinueRetryOnFocus) {\n            // delete promise, so refetching will create new one\n            delete query.promise\n          }\n\n          return query.config.refetchOnWindowFocus\n        })\n        .catch(Console.error)\n    )\n  }\n}\n\nlet removePreviousHandler\n\nexport function setFocusHandler(callback) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler()\n  }\n  // Sub the new watcher\n  removePreviousHandler = callback(onWindowFocus)\n}\n\nsetFocusHandler(handleFocus => {\n  // Listen to visibillitychange and focus\n  if (!isServer && window?.addEventListener) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false)\n    window.addEventListener(focusEvent, handleFocus, false)\n\n    return () => {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus)\n      window.removeEventListener(focusEvent, handleFocus)\n    }\n  }\n})\n","import React from 'react'\nimport { queryCache, makeQueryCache } from '../core'\n\nexport const queryCacheContext = React.createContext(queryCache)\n\nexport const queryCaches = [queryCache]\n\nexport const useQueryCache = () => React.useContext(queryCacheContext)\n\nexport function ReactQueryCacheProvider({ queryCache, children }) {\n  const resolvedQueryCache = React.useMemo(\n    () => queryCache || makeQueryCache(),\n    [queryCache]\n  )\n\n  React.useEffect(() => {\n    queryCaches.push(resolvedQueryCache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(resolvedQueryCache)\n      if (i > -1) {\n        queryCaches.splice(i, 1)\n      }\n      // if the resolvedQueryCache was created by us, we need to tear it down\n      if (queryCache == null) {\n        resolvedQueryCache.clear({ notify: false })\n      }\n    }\n  }, [resolvedQueryCache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={resolvedQueryCache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n","import React from 'react'\nimport { DEFAULT_CONFIG, defaultConfigRef } from '../core/config'\n\n//\n\nconst configContext = React.createContext()\n\nexport function useConfigContext() {\n  return React.useContext(configContext) || defaultConfigRef.current\n}\n\nexport function ReactQueryConfigProvider({ config, children }) {\n  let configContextValue = useConfigContext()\n\n  const newConfig = React.useMemo(() => {\n    const { shared = {}, queries = {}, mutations = {} } = config\n    const {\n      shared: contextShared = {},\n      queries: contextQueries = {},\n      mutations: contextMutations = {},\n    } = configContextValue\n\n    return {\n      shared: {\n        ...contextShared,\n        ...shared,\n      },\n      queries: {\n        ...contextQueries,\n        ...queries,\n      },\n      mutations: {\n        ...contextMutations,\n        ...mutations,\n      },\n    }\n  }, [config, configContextValue])\n\n  React.useEffect(() => {\n    // restore previous config on unmount\n    return () => {\n      defaultConfigRef.current = { ...(configContextValue || DEFAULT_CONFIG) }\n    }\n  }, [configContextValue])\n\n  if (!configContextValue) {\n    defaultConfigRef.current = newConfig\n  }\n\n  return (\n    <configContext.Provider value={newConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { useConfigContext } from './ReactQueryConfigProvider'\n\nimport {\n  uid,\n  isServer,\n  statusError,\n  statusSuccess,\n  getQueryArgs,\n} from '../core/utils'\n\nexport function useUid() {\n  const ref = React.useRef(null)\n\n  if (ref.current === null) {\n    ref.current = uid()\n  }\n\n  return ref.current\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\nexport function useQueryArgs(args) {\n  const configContext = useConfigContext()\n\n  let [queryKey, config, ...rest] = getQueryArgs(args)\n\n  // Build the final config\n  config = {\n    ...configContext.shared,\n    ...configContext.queries,\n    ...config,\n  }\n\n  return [queryKey, config, ...rest]\n}\n\nexport function useMountedCallback(callback) {\n  const mounted = React.useRef(false)\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mounted.current = true\n    return () => (mounted.current = false)\n  }, [])\n\n  return React.useCallback(\n    (...args) => (mounted.current ? callback(...args) : void 0),\n    [callback]\n  )\n}\n\nexport function handleSuspense(queryInfo) {\n  if (\n    queryInfo.query.config.suspense ||\n    queryInfo.query.config.useErrorBoundary\n  ) {\n    if (\n      queryInfo.query.state.status === statusError &&\n      queryInfo.query.state.throwInErrorBoundary\n    ) {\n      throw queryInfo.error\n    }\n\n    if (\n      queryInfo.query.config.suspense &&\n      queryInfo.status !== statusSuccess &&\n      queryInfo.query.config.enabled\n    ) {\n      queryInfo.query.wasSuspended = true\n      throw queryInfo.query.fetch()\n    }\n  }\n}\n","import React from 'react'\n\nimport { useMountedCallback, useGetLatest } from './utils'\nimport { useQueryCache } from './ReactQueryCacheProvider'\n\nexport function useIsFetching() {\n  const queryCache = useQueryCache()\n  const [state, unsafeRerender] = React.useReducer(d => d + 1, 1)\n  const rerender = useMountedCallback(unsafeRerender)\n\n  const isFetching = React.useMemo(() => state && queryCache.isFetching, [\n    queryCache.isFetching,\n    state,\n  ])\n\n  const getIsFetching = useGetLatest(isFetching)\n\n  React.useEffect(\n    () =>\n      queryCache.subscribe(newCache => {\n        if (getIsFetching() !== newCache.isFetching) rerender()\n      }),\n    [getIsFetching, queryCache, rerender]\n  )\n\n  return isFetching\n}\n","import React from 'react'\n\n//\n\nimport { useConfigContext } from './ReactQueryConfigProvider'\nimport { useGetLatest, useMountedCallback } from './utils'\nimport {\n  statusIdle,\n  statusLoading,\n  statusSuccess,\n  statusError,\n  Console,\n  uid,\n  noop,\n} from '../core/utils'\n\nconst getDefaultState = () => ({\n  status: statusIdle,\n  data: undefined,\n  error: null,\n})\n\nconst actionReset = {}\nconst actionLoading = {}\nconst actionResolve = {}\nconst actionReject = {}\n\nfunction mutationReducer(state, action) {\n  if (action.type === actionReset) {\n    return getDefaultState()\n  }\n  if (action.type === actionLoading) {\n    return {\n      status: statusLoading,\n    }\n  }\n  if (action.type === actionResolve) {\n    return {\n      status: statusSuccess,\n      data: action.data,\n    }\n  }\n  if (action.type === actionReject) {\n    return {\n      status: statusError,\n      error: action.error,\n    }\n  }\n  throw new Error()\n}\n\nexport function useMutation(mutationFn, config = {}) {\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const getConfig = useGetLatest({\n    ...useConfigContext().shared,\n    ...useConfigContext().mutations,\n    ...config,\n  })\n\n  const latestMutationRef = React.useRef()\n\n  const mutate = React.useCallback(\n    async (\n      variables,\n      { onSuccess = noop, onError = noop, onSettled = noop, throwOnError } = {}\n    ) => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      let snapshotValue\n\n      try {\n        dispatch({ type: actionLoading })\n        snapshotValue = await config.onMutate(variables)\n\n        let data = await getMutationFn()(variables)\n\n        if (isLatest()) {\n          dispatch({ type: actionResolve, data })\n        }\n\n        await config.onSuccess(data, variables)\n        await onSuccess(data, variables)\n        await config.onSettled(data, null, variables)\n        await onSettled(data, null, variables)\n\n        return data\n      } catch (error) {\n        Console.error(error)\n        await config.onError(error, variables, snapshotValue)\n        await onError(error, variables, snapshotValue)\n        await config.onSettled(undefined, error, variables, snapshotValue)\n        await onSettled(undefined, error, variables, snapshotValue)\n\n        if (isLatest()) {\n          dispatch({ type: actionReject, error })\n        }\n\n        if (throwOnError ?? config.throwOnError) {\n          throw error\n        }\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => dispatch({ type: actionReset }), [\n    dispatch,\n  ])\n\n  React.useEffect(() => {\n    const { suspense, useErrorBoundary } = getConfig()\n\n    if ((useErrorBoundary ?? suspense) && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [\n    mutate,\n    {\n      ...state,\n      reset,\n      isIdle: state.status === statusIdle,\n      isLoading: state.status === statusLoading,\n      isSuccess: state.status === statusSuccess,\n      isError: state.status === statusError,\n    },\n  ]\n}\n","import React from 'react'\n\n//\n\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useMountedCallback } from './utils'\n\nexport function useBaseQuery(queryKey, config = {}) {\n  // Make a rerender function\n  const rerender = useMountedCallback(React.useState()[1])\n\n  // Get the query cache\n  const queryCache = useQueryCache()\n\n  // Build the query for use\n  const query = queryCache.buildQuery(queryKey, config)\n\n  // Create a query instance ref\n  const instanceRef = React.useRef()\n\n  // Subscribe to the query when the subscribe function changes\n  React.useEffect(() => {\n    instanceRef.current = query.subscribe(() => rerender({}))\n\n    // Unsubscribe when things change\n    return instanceRef.current.unsubscribe\n  }, [query, rerender])\n\n  // Always update the config\n  React.useEffect(() => {\n    instanceRef.current.updateConfig(config)\n  })\n\n  const enabledBool = Boolean(config.enabled)\n\n  // Run the instance when the query or enabled change\n  React.useEffect(() => {\n    if (enabledBool && query) {\n      // Just for change detection\n    }\n    instanceRef.current.run()\n  }, [enabledBool, query])\n\n  return {\n    ...query,\n    ...query.state,\n    query,\n  }\n}\n","import { useBaseQuery } from './useBaseQuery'\nimport { useQueryArgs, handleSuspense } from './utils'\n\nexport function useQuery(...args) {\n  const query = useBaseQuery(...useQueryArgs(args))\n\n  handleSuspense(query)\n\n  return query\n}\n","import React from 'react'\n\n//\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { useQueryArgs, handleSuspense } from './utils'\nimport { getStatusBools } from '../core/utils'\n\n// A paginated query is more like a \"lag\" query, which means\n// as the query key changes, we keep the results from the\n// last query and use them as placeholder data in the next one\n// We DON'T use it as initial data though. That's important\nexport function usePaginatedQuery(...args) {\n  let [queryKey, config = {}] = useQueryArgs(args)\n\n  // Keep track of the latest data result\n  const lastDataRef = React.useRef()\n\n  // If latestData is there, don't use initialData\n  if (typeof lastDataRef.current !== 'undefined') {\n    delete config.initialData\n  }\n\n  // Make the query as normal\n  const queryInfo = useBaseQuery(queryKey, config)\n\n  // If the query is disabled, get rid of the latest data\n  if (!queryInfo.query.config.enabled) {\n    lastDataRef.current = undefined\n  }\n\n  // Get the real data and status from the query\n  let { data: latestData, status } = queryInfo\n\n  // If the real query succeeds, and there is data in it,\n  // update the latest data\n  React.useEffect(() => {\n    if (status === 'success' && typeof latestData !== 'undefined') {\n      lastDataRef.current = latestData\n    }\n  }, [latestData, status])\n\n  // Resolved data should be either the real data we're waiting on\n  // or the latest placeholder data\n  let resolvedData = latestData\n  if (typeof resolvedData === 'undefined') {\n    resolvedData = lastDataRef.current\n  }\n\n  // If we have any data at all from either, we\n  // need to make sure the status is success, even though\n  // the real query may still be loading\n  if (typeof resolvedData !== 'undefined') {\n    const overrides = { status: 'success', ...getStatusBools('success') }\n    Object.assign(queryInfo.query.state, overrides)\n    Object.assign(queryInfo, overrides)\n  }\n\n  const paginatedQueryInfo = {\n    ...queryInfo,\n    resolvedData,\n    latestData,\n  }\n\n  handleSuspense(paginatedQueryInfo)\n\n  return paginatedQueryInfo\n}\n","//\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { useQueryArgs, handleSuspense } from './utils'\n\nexport function useInfiniteQuery(...args) {\n  let [queryKey, config] = useQueryArgs(args)\n\n  config.infinite = true\n\n  const queryInfo = useBaseQuery(queryKey, config)\n\n  handleSuspense(queryInfo)\n\n  return queryInfo\n}\n"]},"metadata":{},"sourceType":"module"}