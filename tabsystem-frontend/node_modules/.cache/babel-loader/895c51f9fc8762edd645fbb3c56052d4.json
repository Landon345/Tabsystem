{"ast":null,"code":"import { Register, Login, Logout } from \"./Api/Auth\";\n\nclass Auth {\n  constructor() {\n    this.authenticated = false;\n    this.admin = false;\n    this.message = \"\";\n    this.registerMessage = \"\";\n\n    if (localStorage.getItem(\"token\")) {\n      this.authenticated = true;\n    }\n\n    if (localStorage.getItem(\"token\") && localStorage.getItem(\"admin\")) {\n      this.authenticated = true;\n      this.admin = true;\n    }\n  }\n\n  async register(cb, newUser) {\n    const data = await Register(newUser);\n    console.log(data);\n\n    if (data.success) {\n      console.log(\"register success\");\n      this.registerMessage = \"Successfully registered user.\";\n      console.log(this.registerMessage);\n    } else {\n      console.log(\"register false\");\n      this.registerMessage = \"Something went wrong\";\n    }\n\n    cb(this.registerMessage);\n  }\n\n  async login(cb, user) {\n    const data = await Login(user);\n\n    if (data.success) {\n      localStorage.setItem(\"token\", data.data.api_token);\n      this.authenticated = true;\n\n      if (data.data.user.admin) {\n        localStorage.setItem(\"admin\", true);\n        this.admin = true;\n      }\n    } else {\n      this.message = \"Username or password incorrect.\";\n      localStorage.removeItem(\"token\");\n      this.authenticated = false;\n    }\n\n    await cb(this.admin);\n  }\n\n  async logout(cb) {\n    Logout();\n    this.authenticated = false;\n    this.admin = false;\n    cb();\n  }\n\n  isAuthenticated() {\n    return this.authenticated;\n  }\n\n  isAdmin() {\n    return this.admin;\n  }\n\n  getMessage() {\n    return this.message;\n  }\n\n  getRegisterMessage() {\n    return this.registerMessage;\n  }\n\n}\n\nexport default new Auth();","map":{"version":3,"sources":["/Users/landonschlangen/Documents/WebDevelopmentFolder/ReactApps/tabsystem/src/Auth.js"],"names":["Register","Login","Logout","Auth","constructor","authenticated","admin","message","registerMessage","localStorage","getItem","register","cb","newUser","data","console","log","success","login","user","setItem","api_token","removeItem","logout","isAuthenticated","isAdmin","getMessage","getRegisterMessage"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,KAAnB,EAA0BC,MAA1B,QAAwC,YAAxC;;AAEA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,GAAG;AACZ,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,KAAL,GAAa,KAAb;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,eAAL,GAAuB,EAAvB;;AACA,QAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AACjC,WAAKL,aAAL,GAAqB,IAArB;AACD;;AACD,QAAII,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiCD,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArC,EAAoE;AAClE,WAAKL,aAAL,GAAqB,IAArB;AACA,WAAKC,KAAL,GAAa,IAAb;AACD;AACF;;AAED,QAAMK,QAAN,CAAeC,EAAf,EAAmBC,OAAnB,EAA4B;AAC1B,UAAMC,IAAI,GAAG,MAAMd,QAAQ,CAACa,OAAD,CAA3B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,QAAIA,IAAI,CAACG,OAAT,EAAkB;AAChBF,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,WAAKR,eAAL,GAAuB,+BAAvB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,eAAjB;AACD,KAJD,MAIO;AACLO,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAKR,eAAL,GAAuB,sBAAvB;AACD;;AACDI,IAAAA,EAAE,CAAC,KAAKJ,eAAN,CAAF;AACD;;AAED,QAAMU,KAAN,CAAYN,EAAZ,EAAgBO,IAAhB,EAAsB;AACpB,UAAML,IAAI,GAAG,MAAMb,KAAK,CAACkB,IAAD,CAAxB;;AACA,QAAIL,IAAI,CAACG,OAAT,EAAkB;AAChBR,MAAAA,YAAY,CAACW,OAAb,CAAqB,OAArB,EAA8BN,IAAI,CAACA,IAAL,CAAUO,SAAxC;AACA,WAAKhB,aAAL,GAAqB,IAArB;;AACA,UAAIS,IAAI,CAACA,IAAL,CAAUK,IAAV,CAAeb,KAAnB,EAA0B;AACxBG,QAAAA,YAAY,CAACW,OAAb,CAAqB,OAArB,EAA8B,IAA9B;AACA,aAAKd,KAAL,GAAa,IAAb;AACD;AACF,KAPD,MAOO;AACL,WAAKC,OAAL,GAAe,iCAAf;AACAE,MAAAA,YAAY,CAACa,UAAb,CAAwB,OAAxB;AACA,WAAKjB,aAAL,GAAqB,KAArB;AACD;;AAED,UAAMO,EAAE,CAAC,KAAKN,KAAN,CAAR;AACD;;AAED,QAAMiB,MAAN,CAAaX,EAAb,EAAiB;AACfV,IAAAA,MAAM;AACN,SAAKG,aAAL,GAAqB,KAArB;AACA,SAAKC,KAAL,GAAa,KAAb;AACAM,IAAAA,EAAE;AACH;;AACDY,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKnB,aAAZ;AACD;;AACDoB,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKnB,KAAZ;AACD;;AACDoB,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKnB,OAAZ;AACD;;AACDoB,EAAAA,kBAAkB,GAAG;AACnB,WAAO,KAAKnB,eAAZ;AACD;;AAhEQ;;AAmEX,eAAe,IAAIL,IAAJ,EAAf","sourcesContent":["import { Register, Login, Logout } from \"./Api/Auth\";\n\nclass Auth {\n  constructor() {\n    this.authenticated = false;\n    this.admin = false;\n    this.message = \"\";\n    this.registerMessage = \"\";\n    if (localStorage.getItem(\"token\")) {\n      this.authenticated = true;\n    }\n    if (localStorage.getItem(\"token\") && localStorage.getItem(\"admin\")) {\n      this.authenticated = true;\n      this.admin = true;\n    }\n  }\n\n  async register(cb, newUser) {\n    const data = await Register(newUser);\n    console.log(data);\n    if (data.success) {\n      console.log(\"register success\");\n      this.registerMessage = \"Successfully registered user.\";\n      console.log(this.registerMessage);\n    } else {\n      console.log(\"register false\");\n      this.registerMessage = \"Something went wrong\";\n    }\n    cb(this.registerMessage);\n  }\n\n  async login(cb, user) {\n    const data = await Login(user);\n    if (data.success) {\n      localStorage.setItem(\"token\", data.data.api_token);\n      this.authenticated = true;\n      if (data.data.user.admin) {\n        localStorage.setItem(\"admin\", true);\n        this.admin = true;\n      }\n    } else {\n      this.message = \"Username or password incorrect.\";\n      localStorage.removeItem(\"token\");\n      this.authenticated = false;\n    }\n\n    await cb(this.admin);\n  }\n\n  async logout(cb) {\n    Logout();\n    this.authenticated = false;\n    this.admin = false;\n    cb();\n  }\n  isAuthenticated() {\n    return this.authenticated;\n  }\n  isAdmin() {\n    return this.admin;\n  }\n  getMessage() {\n    return this.message;\n  }\n  getRegisterMessage() {\n    return this.registerMessage;\n  }\n}\n\nexport default new Auth();\n"]},"metadata":{},"sourceType":"module"}