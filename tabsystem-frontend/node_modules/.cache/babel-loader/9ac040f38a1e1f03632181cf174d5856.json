{"ast":null,"code":"var _jsxFileName = \"/Users/landonschlangen/Documents/WebDevelopmentFolder/ReactApps/tabsystem/src/ProtectedAdminComponents/Dashboard/Dashboard.jsx\";\nimport Navbar from \"../../Components/Navbar\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery, useMutation, queryCache } from \"react-query\";\nimport { GetTabs } from \"../../Api/Tabs\";\nimport { GetUsers } from \"../../Api/Users\";\nimport { GetItems } from \"../../Api/Items\";\nimport { GetCategories } from \"../../Api/Categories\";\nimport TabCard from \"../TabDetail/TabCard\";\nimport { Input, Grid, Box, Icon, Skeleton, Spinner } from \"@chakra-ui/core\";\nexport default function Dashboard() {\n  const [category, setCategory] = useState(\"\"); //Use the useQuery supported by react-query to fetch and cache the data.\n\n  const {\n    status: status1,\n    data: tabsData,\n    refetch: refetchTabs\n  } = useQuery(\"GetTabs\", GetTabs, {});\n  const {\n    status: status2,\n    data: usersData\n  } = useQuery(\"GetUsers\", GetUsers, {});\n  const {\n    status: status3,\n    data: itemsData\n  } = useQuery([\"GetItems\", category], GetItems, {});\n  const {\n    status: status4,\n    data: CategoryData\n  } = useQuery(\"GetCategories\", GetCategories, {}); //if loading return Loading with a spinner and skeleton\n\n  if (status1 === \"loading\" || status2 === \"loading\" || status3 === \"loading\" || status4 === \"loading\") {\n    return /*#__PURE__*/React.createElement(Box, {\n      minH: \"100vh\",\n      bg: \"first300\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      textAlign: \"center\",\n      fontSize: \"50px\",\n      mt: \"60px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"Loading... \", /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 22\n      }\n    })), /*#__PURE__*/React.createElement(Skeleton, {\n      height: \"50px\",\n      my: \"10px\",\n      mx: \"10%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Skeleton, {\n      height: \"50px\",\n      my: \"10px\",\n      mx: \"10%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Skeleton, {\n      height: \"50px\",\n      my: \"10px\",\n      mx: \"10%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }));\n  } //if error return the error\n\n\n  if (status1 === \"error\" || status2 === \"error\" || status3 === \"error\" || status4 === \"error\") {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 12\n      }\n    }, \"error\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, \"Amount of tabs = \", tabsData.length), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Amount of users = \", usersData.length), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, \"Amount of items on tabs= \", itemsData.length), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, \"Amount of money on all tabs= \"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"Total price of all items= \"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"Amount of items per category= \"), /*#__PURE__*/React.createElement(Box, {\n    d: \"grid\",\n    gridTemplateColumns: \"1fr 2fr\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    htmlFor: \"category\",\n    color: \"White\",\n    fontSize: \"25px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Category\"), /*#__PURE__*/React.createElement(Select, {\n    name: \"category\",\n    id: \"category\",\n    onChange: ({\n      target\n    }) => setCategory(target.value),\n    width: \"200px\",\n    height: \"30px\",\n    color: \"black\",\n    value: categoryid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, \"none\"), categories.map(category => /*#__PURE__*/React.createElement(\"option\", {\n    key: category.id,\n    value: category.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, category.name)))));\n}","map":{"version":3,"sources":["/Users/landonschlangen/Documents/WebDevelopmentFolder/ReactApps/tabsystem/src/ProtectedAdminComponents/Dashboard/Dashboard.jsx"],"names":["Navbar","React","useState","Link","useQuery","useMutation","queryCache","GetTabs","GetUsers","GetItems","GetCategories","TabCard","Input","Grid","Box","Icon","Skeleton","Spinner","Dashboard","category","setCategory","status","status1","data","tabsData","refetch","refetchTabs","status2","usersData","status3","itemsData","status4","CategoryData","length","target","value","categoryid","categories","map","id","name"],"mappings":"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","sourcesContent":["import Navbar from \"../../Components/Navbar\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery, useMutation, queryCache } from \"react-query\";\nimport { GetTabs } from \"../../Api/Tabs\";\nimport { GetUsers } from \"../../Api/Users\";\nimport { GetItems } from \"../../Api/Items\";\nimport { GetCategories } from \"../../Api/Categories\";\nimport TabCard from \"../TabDetail/TabCard\";\nimport { Input, Grid, Box, Icon, Skeleton, Spinner } from \"@chakra-ui/core\";\n\nexport default function Dashboard() {\n  const [category, setCategory] = useState(\"\");\n  //Use the useQuery supported by react-query to fetch and cache the data.\n  const { status: status1, data: tabsData, refetch: refetchTabs } = useQuery(\n    \"GetTabs\",\n    GetTabs,\n    {}\n  );\n  const { status: status2, data: usersData } = useQuery(\n    \"GetUsers\",\n    GetUsers,\n    {}\n  );\n  const { status: status3, data: itemsData } = useQuery(\n    [\"GetItems\", category],\n    GetItems,\n    {}\n  );\n  const { status: status4, data: CategoryData } = useQuery(\n    \"GetCategories\",\n    GetCategories,\n    {}\n  );\n\n  //if loading return Loading with a spinner and skeleton\n  if (\n    status1 === \"loading\" ||\n    status2 === \"loading\" ||\n    status3 === \"loading\" ||\n    status4 === \"loading\"\n  ) {\n    return (\n      <Box minH=\"100vh\" bg=\"first300\">\n        <Box textAlign=\"center\" fontSize=\"50px\" mt=\"60px\">\n          Loading... <Spinner />\n        </Box>\n        <Skeleton height=\"50px\" my=\"10px\" mx=\"10%\" />\n        <Skeleton height=\"50px\" my=\"10px\" mx=\"10%\" />\n        <Skeleton height=\"50px\" my=\"10px\" mx=\"10%\" />\n      </Box>\n    );\n  }\n  //if error return the error\n  if (\n    status1 === \"error\" ||\n    status2 === \"error\" ||\n    status3 === \"error\" ||\n    status4 === \"error\"\n  ) {\n    return <div className=\"\">error</div>;\n  }\n  return (\n    <div>\n      <Navbar />\n      <h1>Amount of tabs = {tabsData.length}</h1>\n      <h1>Amount of users = {usersData.length}</h1>\n      <h1>Amount of items on tabs= {itemsData.length}</h1>\n      <h1>Amount of money on all tabs= </h1>\n\n      <h1>Total price of all items= </h1>\n      <h1>Amount of items per category= </h1>\n      <Box d=\"grid\" gridTemplateColumns=\"1fr 2fr\">\n        <Box htmlFor=\"category\" color=\"White\" fontSize=\"25px\">\n          Category\n        </Box>\n        <Select\n          name=\"category\"\n          id=\"category\"\n          onChange={({ target }) => setCategory(target.value)}\n          width=\"200px\"\n          height=\"30px\"\n          color=\"black\"\n          value={categoryid}\n        >\n          <option value={\"\"}>none</option>\n          {categories.map((category) => (\n            <option key={category.id} value={category.id}>\n              {category.name}\n            </option>\n          ))}\n        </Select>\n      </Box>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}