{"ast":null,"code":"class Auth {\n  constructor() {\n    this.authenticated = false;\n    this.admin = false;\n    this.message = \"\";\n    this.registerMessage = \"\";\n\n    if (localStorage.getItem(\"token\")) {\n      this.authenticated = true;\n    }\n\n    if (localStorage.getItem(\"token\") && localStorage.getItem(\"admin\")) {\n      this.authenticated = true;\n      this.admin = true;\n    }\n  }\n\n  async register(cb, newUser) {\n    const response = await fetch(\"http://tabsystem.test/api/register\", {\n      method: \"POST\",\n      mode: \"cors\",\n      // no-cors, *cors, same-origin\n      cache: \"no-cache\",\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"omit\",\n      // include, *same-origin, omit\n      headers: {\n        \"content-type\": \"application/json\",\n        Authentication: `Bearer ${localStorage.getItem(\"token\")}`\n      },\n      redirect: \"follow\",\n      // manual, *follow, error\n      referrerPolicy: \"no-referrer\",\n      // no-referrer, *client\n      body: JSON.stringify(newUser)\n    });\n    const data = await response.json();\n    console.log(data);\n\n    if (data.success) {\n      console.log(\"register success\");\n      this.registerMessage = \"Successfully registered user.\";\n      console.log(this.registerMessage);\n    } else {\n      console.log(\"register false\");\n      this.registerMessage = \"Something went wrong\";\n    }\n\n    cb(this.registerMessage);\n  }\n\n  async login(cb, user) {\n    const response = await fetch(\"http://tabsystem.test/api/login\", {\n      method: \"POST\",\n      mode: \"cors\",\n      // no-cors, *cors, same-origin\n      cache: \"no-cache\",\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"omit\",\n      // include, *same-origin, omit\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      redirect: \"follow\",\n      // manual, *follow, error\n      referrerPolicy: \"no-referrer\",\n      // no-referrer, *client\n      body: JSON.stringify(user)\n    });\n    const data = await response.json();\n\n    if (data.success) {\n      localStorage.setItem(\"token\", data.data.api_token);\n      this.authenticated = true;\n\n      if (data.data.user.admin) {\n        localStorage.setItem(\"admin\", true);\n        this.admin = true;\n      }\n    } else {\n      this.message = \"Username or password incorrect.\";\n      localStorage.removeItem(\"token\");\n      this.authenticated = false;\n    }\n\n    await cb(this.admin);\n  }\n\n  async logout(cb) {\n    const response = await fetch(`http://tabsystem.test/api/logout`, {\n      method: \"POST\",\n      mode: \"cors\",\n      // no-cors, *cors, same-origin\n      cache: \"no-cache\",\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"omit\",\n      // include, *same-origin, omit\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        \"content-type\": \"application/json\"\n      },\n      redirect: \"follow\",\n      // manual, *follow, error\n      referrerPolicy: \"no-referrer\" // no-referrer, *client\n\n    });\n    this.authenticated = false;\n    this.admin = false;\n    cb();\n  }\n\n  isAuthenticated() {\n    return this.authenticated;\n  }\n\n  isAdmin() {\n    return this.admin;\n  }\n\n  getMessage() {\n    return this.message;\n  }\n\n  getRegisterMessage() {\n    return this.registerMessage;\n  }\n\n}\n\nexport default new Auth();","map":{"version":3,"sources":["/Users/landonschlangen/Documents/WebDevelopmentFolder/ReactApps/tabsystem/src/Auth.js"],"names":["Auth","constructor","authenticated","admin","message","registerMessage","localStorage","getItem","register","cb","newUser","response","fetch","method","mode","cache","credentials","headers","Authentication","redirect","referrerPolicy","body","JSON","stringify","data","json","console","log","success","login","user","setItem","api_token","removeItem","logout","Authorization","isAuthenticated","isAdmin","getMessage","getRegisterMessage"],"mappings":"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","sourcesContent":["class Auth {\n  constructor() {\n    this.authenticated = false;\n    this.admin = false;\n    this.message = \"\";\n    this.registerMessage = \"\";\n    if (localStorage.getItem(\"token\")) {\n      this.authenticated = true;\n    }\n    if (localStorage.getItem(\"token\") && localStorage.getItem(\"admin\")) {\n      this.authenticated = true;\n      this.admin = true;\n    }\n  }\n\n  async register(cb, newUser) {\n    const response = await fetch(\"http://tabsystem.test/api/register\", {\n      method: \"POST\",\n      mode: \"cors\", // no-cors, *cors, same-origin\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"omit\", // include, *same-origin, omit\n      headers: {\n        \"content-type\": \"application/json\",\n        Authentication: `Bearer ${localStorage.getItem(\"token\")}`,\n      },\n      redirect: \"follow\", // manual, *follow, error\n      referrerPolicy: \"no-referrer\", // no-referrer, *client\n      body: JSON.stringify(newUser),\n    });\n    const data = await response.json();\n    console.log(data);\n    if (data.success) {\n      console.log(\"register success\");\n      this.registerMessage = \"Successfully registered user.\";\n      console.log(this.registerMessage);\n    } else {\n      console.log(\"register false\");\n      this.registerMessage = \"Something went wrong\";\n    }\n    cb(this.registerMessage);\n  }\n\n  async login(cb, user) {\n    const response = await fetch(\"http://tabsystem.test/api/login\", {\n      method: \"POST\",\n      mode: \"cors\", // no-cors, *cors, same-origin\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"omit\", // include, *same-origin, omit\n      headers: { \"content-type\": \"application/json\" },\n      redirect: \"follow\", // manual, *follow, error\n      referrerPolicy: \"no-referrer\", // no-referrer, *client\n      body: JSON.stringify(user),\n    });\n    const data = await response.json();\n    if (data.success) {\n      localStorage.setItem(\"token\", data.data.api_token);\n      this.authenticated = true;\n      if (data.data.user.admin) {\n        localStorage.setItem(\"admin\", true);\n        this.admin = true;\n      }\n    } else {\n      this.message = \"Username or password incorrect.\";\n      localStorage.removeItem(\"token\");\n      this.authenticated = false;\n    }\n\n    await cb(this.admin);\n  }\n\n  async logout(cb) {\n    const response = await fetch(`http://tabsystem.test/api/logout`, {\n      method: \"POST\",\n      mode: \"cors\", // no-cors, *cors, same-origin\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"omit\", // include, *same-origin, omit\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        \"content-type\": \"application/json\",\n      },\n      redirect: \"follow\", // manual, *follow, error\n      referrerPolicy: \"no-referrer\", // no-referrer, *client\n    });\n    this.authenticated = false;\n    this.admin = false;\n    cb();\n  }\n  isAuthenticated() {\n    return this.authenticated;\n  }\n  isAdmin() {\n    return this.admin;\n  }\n  getMessage() {\n    return this.message;\n  }\n  getRegisterMessage() {\n    return this.registerMessage;\n  }\n}\n\nexport default new Auth();\n"]},"metadata":{},"sourceType":"module"}