{"ast":null,"code":"var _jsxFileName = \"/Users/landonschlangen/Documents/WebDevelopmentFolder/ReactApps/tabsystem/src/ProtectedAdminComponents/Tabs/Tabs.jsx\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery, useMutation, queryCache } from \"react-query\";\nimport { GetTabs, PostTab } from \"../../Api/Tabs\";\nimport { GetUsers } from \"../../Api/Users\";\nimport Navbar from \"../../Components/Navbar\";\nimport TabCard from \"../TabDetail/TabCard\";\nimport { Input, Grid, Box, Icon, Skeleton, Spinner } from \"@chakra-ui/core\";\nimport { MyButton } from \"../../GlobalStyles/Styles\";\nexport default function Tabs() {\n  const [selected, setSelected] = useState(null);\n  const [nameOnTab, setNameOnTab] = useState(\"\");\n  const [balance, setBalance] = useState([]);\n  const [message, setMessage] = useState([]); //Use the useQuery supported by react-query to fetch and cache the data.\n\n  const {\n    status: status1,\n    data: tabsData,\n    refetch: refetchTabs\n  } = useQuery(\"GetTabs\", GetTabs, {});\n  const {\n    status: status2,\n    data: usersData\n  } = useQuery(\"GetUsers\", GetUsers, {});\n  const [mutate] = useMutation(PostTab, {\n    onMutate: newTab => {\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      queryCache.cancelQueries(\"GetTabs\"); // Snapshot the previous value\n\n      const previousTabs = queryCache.getQueryData(\"GetTabs\"); // Optimistically update to the new value\n      //queryCache.setQueryData(\"GetTabs\", (old) => [...old, newTab]);\n      // Return the snapshotted value\n\n      return () => queryCache.setQueryData(\"GetTabs\", previousTabs);\n    },\n    // If the mutation fails, use the value returned from onMutate to roll back\n    onError: (err, newTab, rollback) => rollback(),\n    // Always refetch after error or success:\n    onSettled: () => {\n      refetchTabs();\n    }\n  });\n\n  const select = userid => {\n    setSelected(userid);\n  };\n\n  const handleChange = event => {\n    if ([event.target.name] == \"name\") {\n      setNameOnTab(event.target.value);\n    } else if ([event.target.name] == \"balance\") {\n      setBalance(event.target.value);\n    }\n  };\n\n  const stopSelect = () => {\n    setSelected(null);\n  };\n\n  const newTab = async e => {\n    e.preventDefault();\n    const tab = {\n      user_id: selected,\n      name: nameOnTab,\n      balance: parseInt(balance)\n    };\n    const data = await mutate(tab);\n    console.log(data);\n\n    if (data.success) {\n      setMessage(\"Successfully created tab\");\n    }\n  }; //if loading return Loading with a spinner and skeleton\n\n\n  if (status1 === \"loading\" || status2 === \"loading\") {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      textAlign: \"center\",\n      fontSize: \"50px\",\n      mt: \"60px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, \"Loading... \", /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 24\n      }\n    })), /*#__PURE__*/React.createElement(Skeleton, {\n      height: \"50px\",\n      my: \"10px\",\n      mx: \"10%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Skeleton, {\n      height: \"50px\",\n      my: \"10px\",\n      mx: \"10%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Skeleton, {\n      height: \"50px\",\n      my: \"10px\",\n      mx: \"10%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    })));\n  } //if error return the error\n\n\n  if (status1 === \"error\" || status2 === \"error\") {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 12\n      }\n    }, \"error\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Create a new tab for someone\"), /*#__PURE__*/React.createElement(Box, {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, usersData.map(user => {\n    if (user.id === selected) {\n      return /*#__PURE__*/React.createElement(Box, {\n        bg: \"first100\",\n        color: \"White\",\n        margin: \"20px\",\n        padding: \"20px\",\n        textAlign: \"center\",\n        onClick: () => select(user.id),\n        cursor: \"pointer\",\n        key: user.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Box, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 19\n        }\n      }, \" Name: \", user.name), /*#__PURE__*/React.createElement(Box, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 19\n        }\n      }, \" Site Number: \", user.site_number));\n    }\n\n    return /*#__PURE__*/React.createElement(Box, {\n      bg: \"second100\",\n      color: \"White\",\n      margin: \"20px\",\n      padding: \"20px\",\n      textAlign: \"center\",\n      onClick: () => select(user.id),\n      cursor: \"pointer\",\n      key: user.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, \" Name: \", user.name), /*#__PURE__*/React.createElement(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, \" Site Number: \", user.site_number));\n  })), selected && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: newTab,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, \"Name of tab \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: handleChange,\n    value: nameOnTab,\n    name: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  }, \"Starting Balance\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    onChange: handleChange,\n    value: balance,\n    name: \"balance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(MyButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(MyButton, {\n    onClick: stopSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, \"No Select\")), message), /*#__PURE__*/React.createElement(Box, {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\",\n    mx: \"20px\",\n    py: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }, tabsData.tabs.map(tab => /*#__PURE__*/React.createElement(Link, {\n    key: tab.id,\n    to: `/tabs/detail/${tab.id}`,\n    style: {\n      textDecoration: \"none\",\n      color: \"black\",\n      margin: \"20px 0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 15\n    }\n  }, \"Tab Name: \", tab.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 15\n    }\n  }, \"Balance: \", tab.balance))))));\n}","map":{"version":3,"sources":["/Users/landonschlangen/Documents/WebDevelopmentFolder/ReactApps/tabsystem/src/ProtectedAdminComponents/Tabs/Tabs.jsx"],"names":["React","useState","Link","useQuery","useMutation","queryCache","GetTabs","PostTab","GetUsers","Navbar","TabCard","Input","Grid","Box","Icon","Skeleton","Spinner","MyButton","Tabs","selected","setSelected","nameOnTab","setNameOnTab","balance","setBalance","message","setMessage","status","status1","data","tabsData","refetch","refetchTabs","status2","usersData","mutate","onMutate","newTab","cancelQueries","previousTabs","getQueryData","setQueryData","onError","err","rollback","onSettled","select","userid","handleChange","event","target","name","value","stopSelect","e","preventDefault","tab","user_id","parseInt","console","log","success","map","user","id","site_number","tabs","textDecoration","color","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,UAAhC,QAAkD,aAAlD;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,gBAAjC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCC,QAAjC,EAA2CC,OAA3C,QAA0D,iBAA1D;AACA,SAASC,QAAT,QAAyB,2BAAzB;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC7B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACoB,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACsB,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACwB,OAAD,EAAUC,UAAV,IAAwBzB,QAAQ,CAAC,EAAD,CAAtC,CAJ6B,CAK7B;;AACA,QAAM;AAAE0B,IAAAA,MAAM,EAAEC,OAAV;AAAmBC,IAAAA,IAAI,EAAEC,QAAzB;AAAmCC,IAAAA,OAAO,EAAEC;AAA5C,MAA4D7B,QAAQ,CACxE,SADwE,EAExEG,OAFwE,EAGxE,EAHwE,CAA1E;AAKA,QAAM;AAAEqB,IAAAA,MAAM,EAAEM,OAAV;AAAmBJ,IAAAA,IAAI,EAAEK;AAAzB,MAAuC/B,QAAQ,CACnD,UADmD,EAEnDK,QAFmD,EAGnD,EAHmD,CAArD;AAMA,QAAM,CAAC2B,MAAD,IAAW/B,WAAW,CAACG,OAAD,EAAU;AACpC6B,IAAAA,QAAQ,EAAGC,MAAD,IAAY;AACpB;AACAhC,MAAAA,UAAU,CAACiC,aAAX,CAAyB,SAAzB,EAFoB,CAIpB;;AACA,YAAMC,YAAY,GAAGlC,UAAU,CAACmC,YAAX,CAAwB,SAAxB,CAArB,CALoB,CAOpB;AACA;AAEA;;AACA,aAAO,MAAMnC,UAAU,CAACoC,YAAX,CAAwB,SAAxB,EAAmCF,YAAnC,CAAb;AACD,KAbmC;AAcpC;AACAG,IAAAA,OAAO,EAAE,CAACC,GAAD,EAAMN,MAAN,EAAcO,QAAd,KAA2BA,QAAQ,EAfR;AAgBpC;AACAC,IAAAA,SAAS,EAAE,MAAM;AACfb,MAAAA,WAAW;AACZ;AAnBmC,GAAV,CAA5B;;AAqBA,QAAMc,MAAM,GAAIC,MAAD,IAAY;AACzB3B,IAAAA,WAAW,CAAC2B,MAAD,CAAX;AACD,GAFD;;AAGA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAI,CAACA,KAAK,CAACC,MAAN,CAAaC,IAAd,KAAuB,MAA3B,EAAmC;AACjC7B,MAAAA,YAAY,CAAC2B,KAAK,CAACC,MAAN,CAAaE,KAAd,CAAZ;AACD,KAFD,MAEO,IAAI,CAACH,KAAK,CAACC,MAAN,CAAaC,IAAd,KAAuB,SAA3B,EAAsC;AAC3C3B,MAAAA,UAAU,CAACyB,KAAK,CAACC,MAAN,CAAaE,KAAd,CAAV;AACD;AACF,GAND;;AAOA,QAAMC,UAAU,GAAG,MAAM;AACvBjC,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAFD;;AAGA,QAAMiB,MAAM,GAAG,MAAOiB,CAAP,IAAa;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,GAAG,GAAG;AACVC,MAAAA,OAAO,EAAEtC,QADC;AAEVgC,MAAAA,IAAI,EAAE9B,SAFI;AAGVE,MAAAA,OAAO,EAAEmC,QAAQ,CAACnC,OAAD;AAHP,KAAZ;AAMA,UAAMM,IAAI,GAAG,MAAMM,MAAM,CAACqB,GAAD,CAAzB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY/B,IAAZ;;AACA,QAAIA,IAAI,CAACgC,OAAT,EAAkB;AAChBnC,MAAAA,UAAU,CAAC,0BAAD,CAAV;AACD;AACF,GAbD,CAnD6B,CAkE7B;;;AACA,MAAIE,OAAO,KAAK,SAAZ,IAAyBK,OAAO,KAAK,SAAzC,EAAoD;AAClD,wBACE;AAAK,MAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,QAAQ,EAAC,MAAjC;AAAwC,MAAA,EAAE,EAAC,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACa,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADb,CADF,eAIE,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAC,MAAjB;AAAwB,MAAA,EAAE,EAAC,MAA3B;AAAkC,MAAA,EAAE,EAAC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,eAKE,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAC,MAAjB;AAAwB,MAAA,EAAE,EAAC,MAA3B;AAAkC,MAAA,EAAE,EAAC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,eAME,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAC,MAAjB;AAAwB,MAAA,EAAE,EAAC,MAA3B;AAAkC,MAAA,EAAE,EAAC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF,CADF;AAYD,GAhF4B,CAiF7B;;;AACA,MAAIL,OAAO,KAAK,OAAZ,IAAuBK,OAAO,KAAK,OAAvC,EAAgD;AAC9C,wBAAO;AAAK,MAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACD;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADF,eAEE,oBAAC,GAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,mBAAmB,EAAC,sCAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGC,SAAS,CAAC4B,GAAV,CAAeC,IAAD,IAAU;AACvB,QAAIA,IAAI,CAACC,EAAL,KAAY7C,QAAhB,EAA0B;AACxB,0BACE,oBAAC,GAAD;AACE,QAAA,EAAE,EAAC,UADL;AAEE,QAAA,KAAK,EAAC,OAFR;AAGE,QAAA,MAAM,EAAC,MAHT;AAIE,QAAA,OAAO,EAAC,MAJV;AAKE,QAAA,SAAS,EAAC,QALZ;AAME,QAAA,OAAO,EAAE,MAAM2B,MAAM,CAACiB,IAAI,CAACC,EAAN,CANvB;AAOE,QAAA,MAAM,EAAC,SAPT;AAQE,QAAA,GAAG,EAAED,IAAI,CAACC,EARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAUE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAaD,IAAI,CAACZ,IAAlB,CAVF,eAWE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAoBY,IAAI,CAACE,WAAzB,CAXF,CADF;AAeD;;AACD,wBACE,oBAAC,GAAD;AACE,MAAA,EAAE,EAAC,WADL;AAEE,MAAA,KAAK,EAAC,OAFR;AAGE,MAAA,MAAM,EAAC,MAHT;AAIE,MAAA,OAAO,EAAC,MAJV;AAKE,MAAA,SAAS,EAAC,QALZ;AAME,MAAA,OAAO,EAAE,MAAMnB,MAAM,CAACiB,IAAI,CAACC,EAAN,CANvB;AAOE,MAAA,MAAM,EAAC,SAPT;AAQE,MAAA,GAAG,EAAED,IAAI,CAACC,EARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaD,IAAI,CAACZ,IAAlB,CAVF,eAWE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAoBY,IAAI,CAACE,WAAzB,CAXF,CADF;AAeD,GAjCA,CAJH,CAFF,EA0CG9C,QAAQ,iBACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,QAAQ,EAAEkB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,QAAQ,EAAEW,YAFZ;AAGE,IAAA,KAAK,EAAE3B,SAHT;AAIE,IAAA,IAAI,EAAC,MAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBARF,eASE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,QAAQ,EAAE2B,YAFZ;AAGE,IAAA,KAAK,EAAEzB,OAHT;AAIE,IAAA,IAAI,EAAC,SAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAeE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF,CADF,eAkBE,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAE8B,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAlBF,CA3CJ,EAgEG5B,OAhEH,CAFF,eAoEE,oBAAC,GAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,mBAAmB,EAAC,sCAFtB;AAGE,IAAA,EAAE,EAAC,MAHL;AAIE,IAAA,EAAE,EAAC,MAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGK,QAAQ,CAACoC,IAAT,CAAcJ,GAAd,CAAmBN,GAAD,iBACjB,oBAAC,IAAD;AACE,IAAA,GAAG,EAAEA,GAAG,CAACQ,EADX;AAEE,IAAA,EAAE,EAAG,gBAAeR,GAAG,CAACQ,EAAG,EAF7B;AAGE,IAAA,KAAK,EAAE;AACLG,MAAAA,cAAc,EAAE,MADX;AAELC,MAAAA,KAAK,EAAE,OAFF;AAGLC,MAAAA,MAAM,EAAE;AAHH,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAcb,GAAG,CAACL,IAAlB,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaK,GAAG,CAACjC,OAAjB,CAJF,CATF,CADD,CANH,CApEF,CADF;AAgGD","sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery, useMutation, queryCache } from \"react-query\";\nimport { GetTabs, PostTab } from \"../../Api/Tabs\";\nimport { GetUsers } from \"../../Api/Users\";\nimport Navbar from \"../../Components/Navbar\";\nimport TabCard from \"../TabDetail/TabCard\";\nimport { Input, Grid, Box, Icon, Skeleton, Spinner } from \"@chakra-ui/core\";\nimport { MyButton } from \"../../GlobalStyles/Styles\";\n\nexport default function Tabs() {\n  const [selected, setSelected] = useState(null);\n  const [nameOnTab, setNameOnTab] = useState(\"\");\n  const [balance, setBalance] = useState([]);\n  const [message, setMessage] = useState([]);\n  //Use the useQuery supported by react-query to fetch and cache the data.\n  const { status: status1, data: tabsData, refetch: refetchTabs } = useQuery(\n    \"GetTabs\",\n    GetTabs,\n    {}\n  );\n  const { status: status2, data: usersData } = useQuery(\n    \"GetUsers\",\n    GetUsers,\n    {}\n  );\n\n  const [mutate] = useMutation(PostTab, {\n    onMutate: (newTab) => {\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      queryCache.cancelQueries(\"GetTabs\");\n\n      // Snapshot the previous value\n      const previousTabs = queryCache.getQueryData(\"GetTabs\");\n\n      // Optimistically update to the new value\n      //queryCache.setQueryData(\"GetTabs\", (old) => [...old, newTab]);\n\n      // Return the snapshotted value\n      return () => queryCache.setQueryData(\"GetTabs\", previousTabs);\n    },\n    // If the mutation fails, use the value returned from onMutate to roll back\n    onError: (err, newTab, rollback) => rollback(),\n    // Always refetch after error or success:\n    onSettled: () => {\n      refetchTabs();\n    },\n  });\n  const select = (userid) => {\n    setSelected(userid);\n  };\n  const handleChange = (event) => {\n    if ([event.target.name] == \"name\") {\n      setNameOnTab(event.target.value);\n    } else if ([event.target.name] == \"balance\") {\n      setBalance(event.target.value);\n    }\n  };\n  const stopSelect = () => {\n    setSelected(null);\n  };\n  const newTab = async (e) => {\n    e.preventDefault();\n    const tab = {\n      user_id: selected,\n      name: nameOnTab,\n      balance: parseInt(balance),\n    };\n\n    const data = await mutate(tab);\n    console.log(data);\n    if (data.success) {\n      setMessage(\"Successfully created tab\");\n    }\n  };\n\n  //if loading return Loading with a spinner and skeleton\n  if (status1 === \"loading\" || status2 === \"loading\") {\n    return (\n      <div className=\"\">\n        <div>\n          <Box textAlign=\"center\" fontSize=\"50px\" mt=\"60px\">\n            Loading... <Spinner />\n          </Box>\n          <Skeleton height=\"50px\" my=\"10px\" mx=\"10%\" />\n          <Skeleton height=\"50px\" my=\"10px\" mx=\"10%\" />\n          <Skeleton height=\"50px\" my=\"10px\" mx=\"10%\" />\n        </div>\n      </div>\n    );\n  }\n  //if error return the error\n  if (status1 === \"error\" || status2 === \"error\") {\n    return <div className=\"\">error</div>;\n  }\n\n  return (\n    <div>\n      <Navbar />\n      <div>\n        <h3>Create a new tab for someone</h3>\n        <Box\n          display=\"grid\"\n          gridTemplateColumns=\"repeat(auto-fit, minmax(300px, 1fr))\"\n        >\n          {usersData.map((user) => {\n            if (user.id === selected) {\n              return (\n                <Box\n                  bg=\"first100\"\n                  color=\"White\"\n                  margin=\"20px\"\n                  padding=\"20px\"\n                  textAlign=\"center\"\n                  onClick={() => select(user.id)}\n                  cursor=\"pointer\"\n                  key={user.id}\n                >\n                  <Box> Name: {user.name}</Box>\n                  <Box> Site Number: {user.site_number}</Box>\n                </Box>\n              );\n            }\n            return (\n              <Box\n                bg=\"second100\"\n                color=\"White\"\n                margin=\"20px\"\n                padding=\"20px\"\n                textAlign=\"center\"\n                onClick={() => select(user.id)}\n                cursor=\"pointer\"\n                key={user.id}\n              >\n                <Box> Name: {user.name}</Box>\n                <Box> Site Number: {user.site_number}</Box>\n              </Box>\n            );\n          })}\n        </Box>\n\n        {selected && (\n          <div>\n            <form onSubmit={newTab}>\n              <label>Name of tab </label>\n              <input\n                type=\"text\"\n                onChange={handleChange}\n                value={nameOnTab}\n                name=\"name\"\n              />\n              <label>Starting Balance</label>\n              <input\n                type=\"number\"\n                onChange={handleChange}\n                value={balance}\n                name=\"balance\"\n              />\n              <MyButton type=\"submit\">Submit</MyButton>\n            </form>\n            <MyButton onClick={stopSelect}>No Select</MyButton>\n          </div>\n        )}\n        {message}\n      </div>\n      <Box\n        display=\"grid\"\n        gridTemplateColumns=\"repeat(auto-fit, minmax(300px, 1fr))\"\n        mx=\"20px\"\n        py=\"20px\"\n      >\n        {tabsData.tabs.map((tab) => (\n          <Link\n            key={tab.id}\n            to={`/tabs/detail/${tab.id}`}\n            style={{\n              textDecoration: \"none\",\n              color: \"black\",\n              margin: \"20px 0px\",\n            }}\n          >\n            <div>\n              <p>Tab Name: {tab.name}</p>\n              {/* <p>Site # {tab.users.site_number}</p>\n              <p>User's Name: {tab.users.name}</p> */}\n              <p>Balance: {tab.balance}</p>\n            </div>\n          </Link>\n        ))}\n      </Box>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}