{"ast":null,"code":"var _jsxFileName = \"/Users/landonschlangen/Documents/WebDevelopmentFolder/ReactApps/tabsystem/src/ProtectedAdminComponents/Tabs/Tabs.jsx\";\nimport React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport Navbar from \"../../Components/Navbar\";\nimport CreateTab from \"./CreateTab\";\nimport { Input, Grid, Box, Icon, Skeleton, Spinner } from \"@chakra-ui/core\";\n/**Fetch and return the data from https://intern-pokedex.myriadapps.com/api/v1/pokemon/?page=${page}&name=${queryString}*/\n\nconst fetchData = async key => {\n  const response = await fetch(`http://tabsystem.test/api/tab`, {\n    method: \"Get\",\n    mode: \"cors\",\n    // no-cors, *cors, same-origin\n    cache: \"no-cache\",\n    // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"omit\",\n    // include, *same-origin, omit\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      \"content-type\": \"application/json\"\n    },\n    redirect: \"follow\",\n    // manual, *follow, error\n    referrerPolicy: \"no-referrer\" // no-referrer, *client\n\n  });\n  const data = await response.json();\n  console.log(data);\n  return data;\n};\n\nexport default function Tabs() {\n  //Use the useQuery supported by react-query to fetch and cache the data.\n  const {\n    status,\n    data,\n    error\n  } = useQuery(\"key\", fetchData, {}); //if loading return Loading with a spinner and skeleton\n\n  if (status === \"loading\") {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      textAlign: \"center\",\n      fontSize: \"50px\",\n      mt: \"60px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }, \"Loading... \", /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 24\n      }\n    })), /*#__PURE__*/React.createElement(Skeleton, {\n      height: \"50px\",\n      my: \"10px\",\n      mx: \"10%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Skeleton, {\n      height: \"50px\",\n      my: \"10px\",\n      mx: \"10%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Skeleton, {\n      height: \"50px\",\n      my: \"10px\",\n      mx: \"10%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    })));\n  } //if error return the error\n\n\n  if (status === \"error\") return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 34\n    }\n  }, \"error\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CreateTabs, {\n    users: data.users,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), data.tabs.map(tab => /*#__PURE__*/React.createElement(\"div\", {\n    key: tab.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, tab.name, \" \", tab.balance, \" \", tab.user_id, \" \", tab.users.name)));\n} // function CreateTabs({ users }) {\n//   const [selected, setSelected] = useState(null);\n//   const [nameOnTab, setNameOnTab] = useState(\"\");\n//   const [balance, setBalance] = useState([]);\n//   const [message, setMessage] = useState([]);\n//   const select = (userid) => {\n//     setSelected(userid);\n//   };\n//   const handleChange = (event) => {\n//     if ([event.target.name] == \"name\") {\n//       setNameOnTab(event.target.value);\n//     } else if ([event.target.name] == \"balance\") {\n//       setBalance(event.target.value);\n//     }\n//   };\n//   const newTab = async (e) => {\n//     e.preventDefault();\n//     const tab = {\n//       user_id: selected,\n//       name: nameOnTab,\n//       balance: parseInt(balance),\n//     };\n//     console.log(tab);\n//     const response = await fetch(`http://tabsystem.test/api/tab`, {\n//       method: \"POST\",\n//       mode: \"cors\", // no-cors, *cors, same-origin\n//       cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n//       credentials: \"omit\", // include, *same-origin, omit\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n//         \"content-type\": \"application/json\",\n//       },\n//       redirect: \"follow\", // manual, *follow, error\n//       referrerPolicy: \"no-referrer\", // no-referrer, *client\n//       body: JSON.stringify(tab),\n//     });\n//     const data = await response.json();\n//     console.log(data);\n//     if (data.success) {\n//       setMessage(\"Successfully created tab\");\n//     }\n//   };\n//   return (\n//     <div>\n//       <h3>Create a new tab for someone</h3>\n//       <Box display=\"grid\" gridTemplateColumns=\"repeat(auto-fit, 300px)\">\n//         {users.map((user) => {\n//           if (user.id === selected) {\n//             return (\n//               <Box\n//                 bg=\"first100\"\n//                 color=\"White\"\n//                 margin=\"20px\"\n//                 padding=\"20px\"\n//                 textAlign=\"center\"\n//                 onClick={() => select(user.id)}\n//                 cursor=\"pointer\"\n//                 key={user.id}\n//               >\n//                 <Box> Name: {user.name}</Box>\n//                 <Box> Site Number: {user.site_number}</Box>\n//               </Box>\n//             );\n//           }\n//           return (\n//             <Box\n//               bg=\"second100\"\n//               color=\"White\"\n//               margin=\"20px\"\n//               padding=\"20px\"\n//               textAlign=\"center\"\n//               onClick={() => select(user.id)}\n//               cursor=\"pointer\"\n//               key={user.id}\n//             >\n//               <Box> Name: {user.name}</Box>\n//               <Box> Site Number: {user.site_number}</Box>\n//             </Box>\n//           );\n//         })}\n//       </Box>\n//       {selected && (\n//         <div>\n//           <form onSubmit={newTab}>\n//             <label>Name of tab </label>\n//             <input\n//               type=\"text\"\n//               onChange={handleChange}\n//               value={nameOnTab}\n//               name=\"name\"\n//             />\n//             <lable>Starting Balance</lable>\n//             <input\n//               type=\"number\"\n//               onChange={handleChange}\n//               value={balance}\n//               name=\"balance\"\n//             />\n//             <button type=\"submit\">Submit</button>\n//           </form>\n//         </div>\n//       )}\n//       {message}\n//     </div>\n//   );\n// }\n\nfunction TabCard({\n  id,\n  name,\n  balance,\n  user_id\n}) {}","map":{"version":3,"sources":["/Users/landonschlangen/Documents/WebDevelopmentFolder/ReactApps/tabsystem/src/ProtectedAdminComponents/Tabs/Tabs.jsx"],"names":["React","useState","useQuery","Navbar","CreateTab","Input","Grid","Box","Icon","Skeleton","Spinner","fetchData","key","response","fetch","method","mode","cache","credentials","headers","Authorization","localStorage","getItem","redirect","referrerPolicy","data","json","console","log","Tabs","status","error","users","tabs","map","tab","id","name","balance","user_id","TabCard"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport Navbar from \"../../Components/Navbar\";\nimport CreateTab from \"./CreateTab\";\nimport { Input, Grid, Box, Icon, Skeleton, Spinner } from \"@chakra-ui/core\";\n\n/**Fetch and return the data from https://intern-pokedex.myriadapps.com/api/v1/pokemon/?page=${page}&name=${queryString}*/\nconst fetchData = async (key) => {\n  const response = await fetch(`http://tabsystem.test/api/tab`, {\n    method: \"Get\",\n    mode: \"cors\", // no-cors, *cors, same-origin\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"omit\", // include, *same-origin, omit\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n      \"content-type\": \"application/json\",\n    },\n    redirect: \"follow\", // manual, *follow, error\n    referrerPolicy: \"no-referrer\", // no-referrer, *client\n  });\n\n  const data = await response.json();\n  console.log(data);\n  return data;\n};\n\nexport default function Tabs() {\n  //Use the useQuery supported by react-query to fetch and cache the data.\n  const { status, data, error } = useQuery(\"key\", fetchData, {});\n\n  //if loading return Loading with a spinner and skeleton\n  if (status === \"loading\") {\n    return (\n      <div className=\"\">\n        <div>\n          <Box textAlign=\"center\" fontSize=\"50px\" mt=\"60px\">\n            Loading... <Spinner />\n          </Box>\n          <Skeleton height=\"50px\" my=\"10px\" mx=\"10%\" />\n          <Skeleton height=\"50px\" my=\"10px\" mx=\"10%\" />\n          <Skeleton height=\"50px\" my=\"10px\" mx=\"10%\" />\n        </div>\n      </div>\n    );\n  }\n  //if error return the error\n  if (status === \"error\") return <div className=\"\">error</div>;\n\n  return (\n    <div>\n      <Navbar />\n      <CreateTabs users={data.users} />\n      {data.tabs.map((tab) => (\n        <div key={tab.id}>\n          {tab.name} {tab.balance} {tab.user_id} {tab.users.name}\n        </div>\n      ))}\n    </div>\n  );\n}\n\n// function CreateTabs({ users }) {\n//   const [selected, setSelected] = useState(null);\n//   const [nameOnTab, setNameOnTab] = useState(\"\");\n//   const [balance, setBalance] = useState([]);\n//   const [message, setMessage] = useState([]);\n//   const select = (userid) => {\n//     setSelected(userid);\n//   };\n//   const handleChange = (event) => {\n//     if ([event.target.name] == \"name\") {\n//       setNameOnTab(event.target.value);\n//     } else if ([event.target.name] == \"balance\") {\n//       setBalance(event.target.value);\n//     }\n//   };\n\n//   const newTab = async (e) => {\n//     e.preventDefault();\n//     const tab = {\n//       user_id: selected,\n//       name: nameOnTab,\n//       balance: parseInt(balance),\n//     };\n//     console.log(tab);\n//     const response = await fetch(`http://tabsystem.test/api/tab`, {\n//       method: \"POST\",\n//       mode: \"cors\", // no-cors, *cors, same-origin\n//       cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n//       credentials: \"omit\", // include, *same-origin, omit\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n//         \"content-type\": \"application/json\",\n//       },\n//       redirect: \"follow\", // manual, *follow, error\n//       referrerPolicy: \"no-referrer\", // no-referrer, *client\n//       body: JSON.stringify(tab),\n//     });\n//     const data = await response.json();\n//     console.log(data);\n//     if (data.success) {\n//       setMessage(\"Successfully created tab\");\n//     }\n//   };\n//   return (\n//     <div>\n//       <h3>Create a new tab for someone</h3>\n//       <Box display=\"grid\" gridTemplateColumns=\"repeat(auto-fit, 300px)\">\n//         {users.map((user) => {\n//           if (user.id === selected) {\n//             return (\n//               <Box\n//                 bg=\"first100\"\n//                 color=\"White\"\n//                 margin=\"20px\"\n//                 padding=\"20px\"\n//                 textAlign=\"center\"\n//                 onClick={() => select(user.id)}\n//                 cursor=\"pointer\"\n//                 key={user.id}\n//               >\n//                 <Box> Name: {user.name}</Box>\n//                 <Box> Site Number: {user.site_number}</Box>\n//               </Box>\n//             );\n//           }\n//           return (\n//             <Box\n//               bg=\"second100\"\n//               color=\"White\"\n//               margin=\"20px\"\n//               padding=\"20px\"\n//               textAlign=\"center\"\n//               onClick={() => select(user.id)}\n//               cursor=\"pointer\"\n//               key={user.id}\n//             >\n//               <Box> Name: {user.name}</Box>\n//               <Box> Site Number: {user.site_number}</Box>\n//             </Box>\n//           );\n//         })}\n//       </Box>\n\n//       {selected && (\n//         <div>\n//           <form onSubmit={newTab}>\n//             <label>Name of tab </label>\n//             <input\n//               type=\"text\"\n//               onChange={handleChange}\n//               value={nameOnTab}\n//               name=\"name\"\n//             />\n//             <lable>Starting Balance</lable>\n//             <input\n//               type=\"number\"\n//               onChange={handleChange}\n//               value={balance}\n//               name=\"balance\"\n//             />\n//             <button type=\"submit\">Submit</button>\n//           </form>\n//         </div>\n//       )}\n//       {message}\n//     </div>\n//   );\n// }\n\nfunction TabCard({ id, name, balance, user_id }) {}\n"]},"metadata":{},"sourceType":"module"}