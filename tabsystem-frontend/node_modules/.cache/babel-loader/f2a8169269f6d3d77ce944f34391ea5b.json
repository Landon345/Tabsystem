{"ast":null,"code":"var _jsxFileName = \"/Users/landonschlangen/Documents/WebDevelopmentFolder/ReactApps/tabsystem/src/ProtectedAdminComponents/CreateCategory/CreateCategory.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery, queryCache, useMutation } from \"react-query\";\nimport { GetCategories, PostCategory, DeleteCategory } from \"../../Api/Categories\"; //styled component imports\n\nimport { Box, Icon, Grid, Skeleton, Spinner } from \"@chakra-ui/core\";\nimport { MyButton } from \"../../GlobalStyles/Styles\";\nimport Navbar from \"../../Components/Navbar\";\nexport default function CreateCategory() {\n  const [name, setName] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const {\n    status,\n    data,\n    error,\n    refetch\n  } = useQuery(\"GetCategories\", GetCategories, {});\n  const [mutatePostCategory] = useMutation(PostCategory, {\n    onMutate: newCategory => {\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      queryCache.cancelQueries(\"GetCategories\"); // Snapshot the previous value\n\n      const previousCateogories = queryCache.getQueryData(\"GetCategories\"); // Optimistically update to the new value\n\n      queryCache.setQueryData(\"GetCategories\", old => [...old, newCategory]); // Return the snapshotted value\n\n      return () => queryCache.setQueryData(\"GetCategories\", previousCateogories);\n    },\n    // If the mutation fails, use the value returned from onMutate to roll back\n    onError: (err, newCategory, rollback) => rollback(),\n    // Always refetch after error or success:\n    onSettled: () => {\n      queryCache.refetchQueries(\"GetCategories\");\n    }\n  });\n  const [mutateDeleteCategory] = useMutation(DeleteCategory, {\n    // When mutate is called:\n    onMutate: categoryIdPassed => {\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      queryCache.cancelQueries(\"GetCategories\"); // Snapshot the previous value\n\n      const previousCateogories = queryCache.getQueryData(\"GetCategories\"); // Return the snapshotted value\n\n      return () => queryCache.setQueryData(\"GetCategories\", previousCateogories);\n    },\n    // If the mutation fails, use the value returned from onMutate to roll back\n    onError: (err, categoryIdPassed, rollback) => rollback(),\n    // Always refetch after error or success:\n    onSettled: () => {\n      queryCache.refetchQueries(\"GetCategories\");\n    }\n  });\n\n  const handleChange = event => {\n    setName(event.target.value);\n  };\n\n  const newCategory = async e => {\n    e.preventDefault();\n    const category = {\n      name: name\n    };\n    const data = await mutatePostCategory(category);\n    console.log(data);\n    setName(\"\");\n\n    if (data.success) {\n      setMessage(\"Successfully created item\");\n    } else {\n      setMessage(\"Something went wrong\");\n    }\n  };\n\n  const deleteCategory = async id => {\n    const data = await mutateDeleteCategory(id);\n    console.log(data);\n\n    if (data.success) {\n      setMessage(\"Successfully deleted item\");\n    } else {\n      setMessage(\"Something went wrong\");\n    }\n  }; //return this when loading\n\n\n  if (status === \"loading\") {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      textAlign: \"center\",\n      fontSize: \"50px\",\n      mt: \"60px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, \"Loading... \", /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 24\n      }\n    })), /*#__PURE__*/React.createElement(Skeleton, {\n      height: \"50px\",\n      my: \"10px\",\n      mx: \"10%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Skeleton, {\n      height: \"50px\",\n      my: \"10px\",\n      mx: \"10%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Skeleton, {\n      height: \"50px\",\n      my: \"10px\",\n      mx: \"10%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    })));\n  } //return when error\n\n\n  if (status === \"error\") return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 34\n    }\n  }, \"error \", error);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    templateColumns: \"repeat(auto-fit, minmax(300px, 1fr))\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, data.map((category, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, category.name), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => deleteCategory(category.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, \"Delete\")))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: newCategory,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, \"category name\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: handleChange,\n    value: name,\n    name: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MyButton, {\n    bg: \"White\",\n    bgh: \"second100\",\n    bcf: \"fifth200\",\n    color: \"first200\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, \"Submit\")), message));\n}","map":{"version":3,"sources":["/Users/landonschlangen/Documents/WebDevelopmentFolder/ReactApps/tabsystem/src/ProtectedAdminComponents/CreateCategory/CreateCategory.jsx"],"names":["React","useState","useEffect","Link","useQuery","queryCache","useMutation","GetCategories","PostCategory","DeleteCategory","Box","Icon","Grid","Skeleton","Spinner","MyButton","Navbar","CreateCategory","name","setName","message","setMessage","status","data","error","refetch","mutatePostCategory","onMutate","newCategory","cancelQueries","previousCateogories","getQueryData","setQueryData","old","onError","err","rollback","onSettled","refetchQueries","mutateDeleteCategory","categoryIdPassed","handleChange","event","target","value","e","preventDefault","category","console","log","success","deleteCategory","id","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery, queryCache, useMutation } from \"react-query\";\nimport {\n  GetCategories,\n  PostCategory,\n  DeleteCategory,\n} from \"../../Api/Categories\";\n//styled component imports\nimport { Box, Icon, Grid, Skeleton, Spinner } from \"@chakra-ui/core\";\nimport { MyButton } from \"../../GlobalStyles/Styles\";\n\nimport Navbar from \"../../Components/Navbar\";\n\nexport default function CreateCategory() {\n  const [name, setName] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const { status, data, error, refetch } = useQuery(\n    \"GetCategories\",\n    GetCategories,\n    {}\n  );\n  const [mutatePostCategory] = useMutation(PostCategory, {\n    onMutate: (newCategory) => {\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      queryCache.cancelQueries(\"GetCategories\");\n\n      // Snapshot the previous value\n      const previousCateogories = queryCache.getQueryData(\"GetCategories\");\n\n      // Optimistically update to the new value\n      queryCache.setQueryData(\"GetCategories\", (old) => [...old, newCategory]);\n\n      // Return the snapshotted value\n      return () =>\n        queryCache.setQueryData(\"GetCategories\", previousCateogories);\n    },\n    // If the mutation fails, use the value returned from onMutate to roll back\n    onError: (err, newCategory, rollback) => rollback(),\n    // Always refetch after error or success:\n    onSettled: () => {\n      queryCache.refetchQueries(\"GetCategories\");\n    },\n  });\n  const [mutateDeleteCategory] = useMutation(DeleteCategory, {\n    // When mutate is called:\n    onMutate: (categoryIdPassed) => {\n      // Cancel any outgoing refetches (so they don't overwrite our optimistic update)\n      queryCache.cancelQueries(\"GetCategories\");\n      // Snapshot the previous value\n      const previousCateogories = queryCache.getQueryData(\"GetCategories\");\n      // Return the snapshotted value\n      return () =>\n        queryCache.setQueryData(\"GetCategories\", previousCateogories);\n    },\n    // If the mutation fails, use the value returned from onMutate to roll back\n    onError: (err, categoryIdPassed, rollback) => rollback(),\n    // Always refetch after error or success:\n    onSettled: () => {\n      queryCache.refetchQueries(\"GetCategories\");\n    },\n  });\n\n  const handleChange = (event) => {\n    setName(event.target.value);\n  };\n  const newCategory = async (e) => {\n    e.preventDefault();\n    const category = {\n      name: name,\n    };\n    const data = await mutatePostCategory(category);\n    console.log(data);\n    setName(\"\");\n    if (data.success) {\n      setMessage(\"Successfully created item\");\n    } else {\n      setMessage(\"Something went wrong\");\n    }\n  };\n\n  const deleteCategory = async (id) => {\n    const data = await mutateDeleteCategory(id);\n    console.log(data);\n    if (data.success) {\n      setMessage(\"Successfully deleted item\");\n    } else {\n      setMessage(\"Something went wrong\");\n    }\n  };\n  //return this when loading\n  if (status === \"loading\") {\n    return (\n      <div className=\"\">\n        <div>\n          <Box textAlign=\"center\" fontSize=\"50px\" mt=\"60px\">\n            Loading... <Spinner />\n          </Box>\n          <Skeleton height=\"50px\" my=\"10px\" mx=\"10%\" />\n          <Skeleton height=\"50px\" my=\"10px\" mx=\"10%\" />\n          <Skeleton height=\"50px\" my=\"10px\" mx=\"10%\" />\n        </div>\n      </div>\n    );\n  }\n  //return when error\n  if (status === \"error\") return <div className=\"\">error {error}</div>;\n\n  return (\n    <div>\n      <Navbar />\n      <Grid templateColumns=\"repeat(auto-fit, minmax(300px, 1fr))\">\n        {data.map((category, index) => (\n          <div key={index}>\n            <div>{category.name}</div>\n            <button onClick={() => deleteCategory(category.id)}>Delete</button>\n          </div>\n        ))}\n      </Grid>\n\n      <div>\n        <form onSubmit={newCategory} autoComplete=\"off\">\n          <label>category name</label>\n          <input type=\"text\" onChange={handleChange} value={name} name=\"name\" />\n\n          <MyButton\n            bg=\"White\"\n            bgh=\"second100\"\n            bcf=\"fifth200\"\n            color=\"first200\"\n            type=\"submit\"\n          >\n            Submit\n          </MyButton>\n        </form>\n        {message}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}